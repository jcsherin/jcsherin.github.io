{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "jcsherin",
  "language": "en",
  "home_page_url": "https://jacobsherin.com/",
  "feed_url": "https://example.com/feed/feed.json",
  "description": "jcsherin writes about programming",
  "author": {
    "name": "Your Name Here",
    "url": "https://example.com/about-me/"
  },
  "items": [{
      "id": "https://jacobsherin.com/posts/dremel-column-striping/",
      "url": "https://jacobsherin.com/posts/dremel-column-striping/",
      "title": "Nested Record Shredding",
      "content_html": "<p>Notes:</p>\n<ul>\n<li>A lot of engineering effort goes into building a correct, performant<br />\nvectorized query execution engine for analytical workloads. You can use<br />\neither SQL or DataFrames to run interactive analysis over very large<br />\ndatasets. The data is ready to query in a relational form, and PAX storage<br />\nmodel on disk.</li>\n</ul>\n<p>In columnar storage values of a single column attribute are stored<br />\ncontiguously. In analytics databases the query optimizer can apply<br />\nprojection pushdown directly to the data source. This means only those columns<br />\nwhich are specified in the query are read from storage. Analytical queries are<br />\noften aggregations over the entire data source. So this can reduce the I/O<br />\nrequired and make the queries run faster.</p>\n<p>It is easy to map flat relational data to columns. Given a projection of<br />\ncolumns the original record can be reassembled by index or offset. A record<br />\nhas the same index or offset across all columns. This is not the case with<br />\nnested data structures.</p>\n<p>If nested data structures can be shredded into columns, then it is possible<br />\nto use a SQL or DataFrame interface to query nested data. All the built-in<br />\noptimizations which are available for relational data also then becomes<br />\navailable to nested data structures. The ability to interactively query millions<br />\nor billions of nested data becomes possible in a single node using a vectorized<br />\nquery execution engines like DuckDB, ClickHouse or Apache DataFusion.</p>\n<pre><code># First record\nProductId: 123\nImageGallery:\n  PrimaryImageId: 555\n  AdditionalImageId:\n    - 556\n    - 557\n\n# Second record\nProductId: 678\nImageGallery:\n  PrimaryImageId: 987\n  AdditionalImageId:\n    - 988\n    - 989\n    - 990\n</code></pre>\n<p>Nested data structures are tree shaped. The atomic or primitive value is<br />\nfound at the leaf of the tree. And columns in the nested data structure is<br />\nthe path from root to leaf. The columns with their data type are:</p>\n<ol>\n<li>ProductId - Integer</li>\n<li>ImageGallery.PrimaryImageId - Integer</li>\n<li>ImageGallery.AdditionalImageId - Array[Integer]</li>\n</ol>\n<p>The two records above after being shredded into column values will look like<br />\nthis:</p>\n<pre><code>ProductId                       : [123, 678]\nImageGallery.PrimaryImageId     : [555, 987]\nImageGallery.AdditionalImageId  : [556, 557, 988, 989, 990]\n</code></pre>\n<p>In the absence of other metadata it is now impossible for us to reassemble<br />\nthe original records. The structural information is lost with this encoding.<br />\nWe are unable to identify where a record begins or ends when the nested data<br />\nstructure contains repeated (array) values. In this representation it is not<br />\npossible anymore to know which values in <code>ImageGallery.AdditionalImageId</code><br />\nbelongs to which records.</p>\n<pre><code># First record\nProductId: 123\nImageGallery:\n  PrimaryImageId: 555\n  AdditionalImageId:\n    - 556\n    - 557\nAltText:\n  - Language:\n      - Locale: en-US\n        Description: Athletic running shoes\n        Keyword:\n          - shoes\n          - running\n          - athletic\n\n# Second record\nProductId: 678\nImageGallery:\n  PrimaryImageId: 987\n  AdditionalImageId:\n    - 988\n    - 989\n    - 990\n</code></pre>\n<p>Real world nested data structures are also sparse. In this example the<br />\nfirst nested data contains descriptive text columns, but the second record<br />\ndoes not. For partially or completely missing paths in a nested data<br />\nstructure NULL values are inserted. The more sparse the data because of<br />\nmissing column values, the more NULL values there will be.</p>\n<pre><code>ProductId                       : [123, 678]\nImageGallery.PrimaryImageId     : [555, 987]\nImageGallery.AdditionalImageId  : [556, 557, 988, 989, 990]\n\n# Columns present only in the first record\nAltText.Language.Locale         : [&quot;en-US&quot;, NULL]\nAltText.Language.Description    : [&quot;Athletic running shoes&quot;, NULL]\nAltText.Language.Keyword        : [&quot;shoes&quot;, &quot;running&quot;, &quot;athletic&quot;, NULL]\n</code></pre>\n<p>The Dremel (Google BigQuery) paper (VLDB 2010) introduced a new<br />\nrepresentation for nested data in columnar storage which also stored the<br />\nstructural hierarchy of the nested data side by side with the column values.<br />\nThis metadata made it possible to reassemble the original nested data<br />\nstructure back from columnar format.</p>\n<p>The ability to represent nested data directly in a columnar format meant<br />\nincreased developer productivity. There is no need to normalize the nested<br />\ndata by extracting entities and joining multiple relations using foreign<br />\nkeys in some star or snowflake schema for data analysis. Developers could<br />\nuse the SQL query execution for interactive analysis of very large nested<br />\ndatasets.</p>\n<p>Later when Parquet was created it added ground up support nested data<br />\nstructures in its file format using the techniques and principles described<br />\nin the Dremel paper.</p>\n<p>For the <code>ImageGallery.AdditionalImageId</code> it was impossible to reassemble the<br />\noriginal two records by looking at only the stored column values. In Dremel<br />\nthey introduced metadata which encodes the structure of the values in the<br />\nnested data. They are definition level and repetition level.</p>\n<p>In the below example by reading <code>d</code> (definition level) and <code>r</code> (repetition<br />\nlevel) in tandem with the column values the original nested values can be<br />\nreassembled.</p>\n<pre><code># ImageGallery.AdditionalImageId Column  \n\nd       : [1, 1, 1, 1, 1]             # definition level\nr       : [0, 1, 0, 1, 1]             # repetition level\nvalues  : [556, 557, 988, 989, 990]\n</code></pre>\n<p>To compute the definition level of <code>ImageGallery.AdditionalImageId</code> we need<br />\nto count all the optional and repeated fields in it. To compute the<br />\nrepetition level the index of the value must be known. If there are multiple<br />\nrepeated fields in column path, then the computed repetition level of the<br />\nnearest repeated ancestor.</p>\n<p>The schema of the nested data is required for us to know if a field is<br />\ndefined as required, optional or repeated. So let us inspect the schema for<br />\n<code>ProductImages</code> document before formalizing the computation of definition<br />\nand repetition levels from the nested data.</p>\n<p>The schema for <code>ProductImages</code> is given below. From the schema we can see that<br />\nthis is a nested document which contains the display images for a product and<br />\nlanguage translations of the image descriptions.</p>\n<p>The data model is,</p>\n<ul>\n<li>A field is either a struct type or a primitive type like an integer,<br />\nstring, float, boolean etc.</li>\n<li>A field with no explicit multiplicity labels is a required field. A<br />\nrequired field will always be present in the nested data.</li>\n<li>An optional field is explicitly marked in the schema. In nested data this<br />\nfield maybe present or absent.</li>\n<li>A repeated field is represented as an array of values. The type of<br />\nrepeated field can be either a struct type or a primitive type.</li>\n<li>The ordering of repeated values is significant.</li>\n<li>The leaf node is always a primitive type, or a repeated field of a<br />\nprimitive type.</li>\n<li>A column name is represented using dot notation by joining the field names<br />\nfrom root to leaf. Eg. <code>AltText.Language.Keyword</code></li>\n<li></li>\n</ul>\n<pre><code>ProductImages                     # Document Name\n├─ ProductId [int64]               \n├─ ImageGallery                   \n│  ├─ PrimaryImageId [int64]      \n│  └─ AdditionalImageId [int64]*  # repeated\n└─ AltText\n   └─ Language*                   # repeated\n      ├─ Locale [string]          \n      ├─ Description [string]?    # optional\n      └─ Keyword [string]*        # repeated\n\n* = repeated\n? = optional\n</code></pre>\n<p>A definition level for a column value is computed by counting the occurrence<br />\nof optional and repeated fields which are present in the value. If an optional<br />\nfield is absent then we do not increment the definition level. If a repeated<br />\nfield is empty or missing we do not increment the definition level. So the<br />\ndefinition level can tell us where the path in a tree terminated for any<br />\ngiven column value.</p>\n<p>But this is not enough for us to reassemble repeated values. The repetition<br />\nlevel is used to identify the beginning of an array from the rest of the<br />\narray values. For computing repetition levels, only repeated fields in a<br />\npath are counted.</p>\n<p>In <code>ImageGallery.AdditionalImageId</code>,</p>\n<ul>\n<li><code>ImageGallery</code> is a required field</li>\n<li><code>AdditionalImageId</code> is a repeated field</li>\n</ul>\n<pre><code># ImageGallery.AdditionalImageId Column  \n\ndefinition_levels : [1, 1, 1, 1, 1]\nrepetition_levels : [0, 1, 0, 1, 1]\nvalues            : [556, 557, 988, 989, 990]\n</code></pre>\n<p>From the definition levels we can see that for all values the path is<br />\n<code>ImageGallery.AdditionalImageId</code> because the definition level is 1 which<br />\nmeans the repeated field <code>AdditionalImageId</code> in the path is always present.</p>\n<p>There is only a single repeated field, so the repetition levels can be<br />\neither zero or one. To identify the start of the array, the first element in<br />\nthis example will have a repetition level of zero. The remaining values in<br />\nthe array will have the repetition level zero. So <code>556</code> has repetition level<br />\nof zero, and <code>557</code> has a repetition level of one.</p>\n<p>For the next value <code>988</code> we can infer that it belongs to the second record<br />\nbecause it has a repetition level of zero. This means it has to be the first<br />\nvalue in the array. And the remaining values in the second record <code>989</code>, <code>999</code><br />\nbecause they have a repetition level of 1.</p>\n<p>In this example we were able to identify that the repeated values belonged<br />\nto two separate nested values using the repetition levels.</p>\n<p>Next let us look at a example which contains null values.</p>\n<pre><code>ProductId: 123\nImageGallery:\n  PrimaryImageId: 555\n  AdditionalImageId:\n    - 556\n    - 557\nAltText:\n  - Language:\n      - Locale: en-US\n        Description: Athletic running shoes\n        Keyword:\n          - shoes\n          - athletic\n  - Language:\n      - Locale: en-GB\n        Description: Athletic trainers\n        Keyword:\n          - trainers\n          - sport\n  - Language:\n      - Locale: fr-FR\n  - Language:\n      - Locale: de-DE\n</code></pre>\n<p>The column <code>AltText.Language.Description</code> contains a repeated field and<br />\nexactly two optional fields. The definition level therefore can be between 0<br />\nand 3.</p>\n<ul>\n<li>AltText: optional</li>\n<li>Language: repeated</li>\n<li>Description: optional</li>\n</ul>\n<p>After compiling the column values, there are two NULL values. This<br />\nrepresents the missing <code>Description</code> in the 2nd and 3rd <code>Language</code><br />\nrepetition which corresponds to the <code>Locale</code>: <code>fr-FR</code> and <code>de-DE</code>.</p>\n<pre><code># AltText.Language.Description Column\n\nvalues: [&quot;Athletic running shoes&quot;, &quot;Athletic trainers&quot;, NULL, NULL] \n</code></pre>\n<p>Next let us compute the definition levels. The definition level for both the<br />\nNULL values is two because the path terminates at <code>AltText.Language</code> as the<br />\n<code>Description</code> field is missing in both cases.</p>\n<pre><code># AltText.Language.Description Column\n\ndefinition_levels : [3, 3, 2, 2]\nvalues            : [&quot;Athletic running shoes&quot;, &quot;Athletic trainers&quot;, NULL, NULL] \n</code></pre>\n<p>Next let us compute the repetition levels. This column has a single repeated<br />\nfield which is <code>Language</code>. So repetition levels will be between 0 and 1 for<br />\nall values.</p>\n<p>Here the repetition level of zero clearly identifies the first element in<br />\nthe repeated field <code>Language</code>, from the rest.</p>\n<pre><code># AltText.Language.Description Column\n\nrepetition_levels : [0, 1, 1, 1]\ndefinition_levels : [3, 3, 2, 2]\nvalues            : [&quot;Athletic running shoes&quot;, &quot;Athletic trainers&quot;, NULL, NULL] \n</code></pre>\n<p>Next let us look at an example where there is more than one repeated field<br />\nin a column. The <code>AltText.Language.Keyword</code> column has two repeated fields<br />\nand a single optional field.</p>\n<p>Let us compile the values first. The final two NULL values represent the<br />\nmissing <code>Keyword</code> in the second and third repetition of <code>Language</code>.</p>\n<pre><code># AltText.Language.Keywords\n\nvalues: [&quot;shoes&quot;, &quot;athletic&quot;, &quot;trainers&quot;, &quot;sport&quot;, NULL, NULL]\n</code></pre>\n<p>Next let us compute the definition levels. The NULL values have a definition<br />\nlevel of two because <code>Keyword</code> field is missing.</p>\n<pre><code># AltText.Language.Keywords\n\nvalues: [&quot;shoes&quot;, &quot;athletic&quot;, &quot;trainers&quot;, &quot;sport&quot;, NULL, NULL]\ndef   : [3, 3, 3, 3, 2, 2] \n</code></pre>\n<p>Next let us compute the repetition levels. This looks complicated, but you<br />\nwill soon see how this exactly reassembles the original nested data structure.</p>\n<pre><code># AltText.Language.Keywords\n\nvalues: [&quot;shoes&quot;, &quot;athletic&quot;, &quot;trainers&quot;, &quot;sport&quot;, NULL, NULL]\ndef   : [3, 3, 3, 3, 2, 2] \nrep   : [0, 2, 1, 2, 1, 1]\n</code></pre>\n<hr />\n<p>In columnar storage values of a single column attribute are stored<br />\ncontiguously.</p>\n<p>Nested data structures are tree shaped. In columnar storage values of a<br />\nsingle column attribute is stored contiguously. For flat relational data it</p>\n<hr />\n<p>The Dremel(Google BigQuery) VLDB 2010 paper introduced the technique for<br />\n<strong>record shredding</strong> or <strong>column striping</strong> of complex nested data structures<br />\ninto a columnar storage format. And a few years later the Parquet columnar<br />\nfile format was created with ground up support for nested data adopting the<br />\nideas described in the Dremel paper.</p>\n<p>The challenges involved in flattening a nested data structure into a<br />\ncolumnar storage format are:</p>\n<ul>\n<li>Preserving the structural hierarchy of the data,</li>\n<li>Identifying where a record begins and ends in the column.</li>\n</ul>\n<p>Only if the structure is preserved can the process of shredding be reversed<br />\nand the original nested value be reassembled back from columnar storage.<br />\nThis is made possible by deriving two integer values and stored together<br />\nwith each shredded column value:</p>\n<ol>\n<li>Definition Level</li>\n<li>Repetition Level</li>\n</ol>\n<p>This is remarkable because without any extra steps, the nested data can be<br />\nqueried using modern vectorized query execution engines using the same SQL<br />\nor dataframe interface available for relational data. This includes increased<br />\nI/O efficiency by reading only those columns which are projected in the query.</p>\n<p>The trade-off is the extra space to store the derived definition levels and<br />\nrepetition levels for every value. But in practice efficient encoding<br />\ntechniques and light-weight compression schemes are applied to reduce the<br />\nstorage requirements.</p>\n<h2 id=\"data-model\" tabindex=\"-1\">Data Model <a class=\"direct-link\" href=\"https://jacobsherin.com/posts/dremel-column-striping/#data-model\" aria-hidden=\"true\">#</a></h2>\n<p>what is required, optional, repeated. what is structure. how is that related<br />\nto definition level? what is the intuition for repetition levels? how do<br />\nthey interact together? maybe simple concrete examples will help. but why<br />\nare leading with the data model here before talking about either the<br />\ndefinition and repetition levels.</p>\n<pre><code>\nProductImages\n│\n├─ ProductId [int64]\n│\n├─ ImageGallery\n│ ├─ PrimaryImageId [int64]\n│ └─ AdditionalImageId [int64]*\n│\n└─ AltText*\n└─ Language*\n├─ Locale [string]\n├─ Description [string]?\n└─ Keyword [string]*\n\n* = repeated\n  ? = optional\n\n</code></pre>\n<p>Fig. schema for product images and available translations of descriptive text</p>\n<p>The column <code>AltText.Language.Description</code></p>\n<h2 id=\"repetition-level\" tabindex=\"-1\">Repetition Level <a class=\"direct-link\" href=\"https://jacobsherin.com/posts/dremel-column-striping/#repetition-level\" aria-hidden=\"true\">#</a></h2>\n<h2 id=\"schema\" tabindex=\"-1\">Schema <a class=\"direct-link\" href=\"https://jacobsherin.com/posts/dremel-column-striping/#schema\" aria-hidden=\"true\">#</a></h2>\n<h3 id=\"protobuf-v2\" tabindex=\"-1\">Protobuf v2 <a class=\"direct-link\" href=\"https://jacobsherin.com/posts/dremel-column-striping/#protobuf-v2\" aria-hidden=\"true\">#</a></h3>\n<pre><code>\nmessage Product {\nrequired int64 ProductId; // def_level: 0, rep_level: 0\n\ngroup ImageGallery { // def_level: 1, rep_level: 0\nrequired int64 PrimaryImageId; // def_level: 2, rep_level: 0\nrepeated int64 AdditionalImageId; // def_level: 2, rep_level: 1\n}\n\nrepeated group AltText { // def_level: 1, rep_level: 1\nrepeated group Language { // def_level: 2, rep_level: 2\nrequired string Locale; // def_level: 3, rep_level: 2\noptional string Description; // def_level: 3, rep_level: 2\nrepeated string Keyword; // def_level: 3, rep_level: 3\n}\n}\n}\n\n</code></pre>\n<h3 id=\"tree-diagram\" tabindex=\"-1\">Tree Diagram <a class=\"direct-link\" href=\"https://jacobsherin.com/posts/dremel-column-striping/#tree-diagram\" aria-hidden=\"true\">#</a></h3>\n<pre><code>\nProduct\n│\n├─ ProductId [int64]\n│\n├─ ImageGallery?\n│ ├─ PrimaryImageId [int64]\n│ └─ AdditionalImageId [int64]*\n│\n└─ AltText*\n└─ Language*\n├─ Locale [string]\n├─ Description [string]?\n└─ Keyword [string]*\n\n* = repeated\n  ? = optional\n\n</code></pre>\n<h3 id=\"r1\" tabindex=\"-1\">R1 <a class=\"direct-link\" href=\"https://jacobsherin.com/posts/dremel-column-striping/#r1\" aria-hidden=\"true\">#</a></h3>\n<pre><code>\nProductId: 12345\nImageGallery:\nPrimaryImageId: 555\nAdditionalImageId:\n\n- 556\n- 557\n  AltText:\n\n- Language:\n    - Locale: en-US\n      Description: Athletic running shoes with cushioned soles\n      Keyword:\n        - shoes\n        - running\n        - athletic\n- Language:\n    - Locale: en-GB\n      Description: Athletic trainers with cushioned soles\n      Keyword:\n        - trainers\n        - running\n        - sport\n    - Locale: fr-FR\n    - Locale: de-DE\n- Language:\n    - Locale: en-IN\n      Description: Sports running shoes with extra comfort\n      Keyword:\n        - shoes\n        - running\n        - sports\n        - comfort\n\n</code></pre>\n<h3 id=\"r2\" tabindex=\"-1\">R2 <a class=\"direct-link\" href=\"https://jacobsherin.com/posts/dremel-column-striping/#r2\" aria-hidden=\"true\">#</a></h3>\n<pre><code>\nProductId: 67890\nImageGallery:\nPrimaryImageId: 987\nAdditionalImageId:\n\n- 988\n- 989\n- 990\n\n</code></pre>\n<hr />\n<p>Parquet implements repetition/definition levels for nested data. But<br />\nprimarily it is used for storing and querying relational data. So if I write<br />\nnested data into a Parquet file, does querying it from DuckDB, Apache<br />\nDataFusion be similar to how querying works for relational data? In Dremel<br />\nthe query language is modified to run SQL queries on nested data which is<br />\ncolumn-striped and return results as nested data with a schema. This has<br />\nbetter developer experience, but I suspect may not be supported in either<br />\nDuckDB, DataFusion out of the box. In the case of DataFusion will I be able<br />\nto extend the SQL to support querying and returning nested records instead<br />\nof table values?</p>\n<p>Cross Join vs Lateral Join for nested data</p>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> ProductId<span class=\"token punctuation\">,</span><br />       ARRAY_AGG<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span>Locale<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> missing_description_locales<br /><span class=\"token keyword\">FROM</span> Product<br />         <span class=\"token keyword\">CROSS</span> <span class=\"token keyword\">JOIN</span> UNNEST<span class=\"token punctuation\">(</span>AltText<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> a<br />         <span class=\"token keyword\">CROSS</span> <span class=\"token keyword\">JOIN</span> UNNEST<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token keyword\">Language</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> l<br /><span class=\"token keyword\">WHERE</span> l<span class=\"token punctuation\">.</span>Description <span class=\"token operator\">IS</span> <span class=\"token boolean\">NULL</span><br /><span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> ProductId<br /><span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> ProductId<br /><br /><span class=\"token keyword\">SELECT</span> ProductId<span class=\"token punctuation\">,</span><br />       ARRAY_AGG<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span>Locale<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> missing_description_locales<br /><span class=\"token keyword\">FROM</span> Product<span class=\"token punctuation\">,</span><br />     LATERAL <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> UNNEST<span class=\"token punctuation\">(</span>AltText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> a<span class=\"token punctuation\">,</span><br />     LATERAL <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> UNNEST<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token keyword\">Language</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> l <span class=\"token keyword\">WHERE</span> l<span class=\"token punctuation\">.</span>Description <span class=\"token operator\">IS</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">)</span><br /><span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> ProductId</code></pre>\n<hr />\n<h1 id=\"introduction\" tabindex=\"-1\">Introduction <a class=\"direct-link\" href=\"https://jacobsherin.com/posts/dremel-column-striping/#introduction\" aria-hidden=\"true\">#</a></h1>\n<p><strong>Nested Data</strong></p>\n<pre><code>DocId: 10\nLinks\n  Forward: 20\n  Forward: 40\n  Forward: 60\nName\n  Language\n    Code: 'en-us'\n    Country: 'us'\n  Language\n    Code: 'en'\n  Url: 'http://A'\nName\n  Url: 'http://B'\nName\n  Language\n    Code: 'en-gb'\n    Country: 'gb'\n</code></pre>\n<p>It is possible to directly represent nested data in columnar storage without<br />\napplying any normalization (conversion of nested data structure into a<br />\nrelational form).</p>\n<p>A column begins at the root and ends at the leaf node. The concrete column<br />\nvalue exists at the leaf node. If the path terminates early, or if it is<br />\nmissing then a NULL value is used to indicate the absence of a value for<br />\nthat column.</p>\n<p>In columnar st</p>\n<p><strong>Schema</strong></p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">Document</span><span class=\"token punctuation\">:</span><br />  <span class=\"token key atrule\">DocId</span><span class=\"token punctuation\">:</span> int64  <span class=\"token comment\"># required</span><br />  <span class=\"token key atrule\">Links?</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># optional</span><br />    <span class=\"token key atrule\">Backward*</span><span class=\"token punctuation\">:</span> int64<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><br />    <span class=\"token key atrule\">Forward*</span><span class=\"token punctuation\">:</span> int64<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><br />  <span class=\"token key atrule\">Name*</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># repeated</span><br />    <span class=\"token key atrule\">Language*</span><span class=\"token punctuation\">:</span><br />      <span class=\"token key atrule\">Code</span><span class=\"token punctuation\">:</span> string  <span class=\"token comment\"># required</span><br />      <span class=\"token key atrule\">Country?</span><span class=\"token punctuation\">:</span> string<br />    <span class=\"token key atrule\">Url?</span><span class=\"token punctuation\">:</span> string</code></pre>\n<pre><code>message Document {\n   required int64 DocId;\n   \n   optional group Links {\n      repeated int64 Backward;\n      repeated int64 Forward; \n   }\n   \n   repeated group Name {\n      repeated group Language {\n        required string Code;\n        optional string Country; \n      }\n      optional string Url; \n   }\n} \n</code></pre>\n<p>A column is composed of fields from the root to the leaf as per schema<br />\ndefinition. The concrete value exists at the leaf of a path.</p>\n<p><strong>Nested Data As Columns</strong></p>\n<pre><code>DocId                 : [10]\nLinks.Backward        : [NULL]\nLinks.Forward         : [20, 40, 60]\nName.Language.Code    : ['en-us', 'en', NULL, 'en-gb']\nName.Language.Country : ['us', NULL, NULL, 'gb']\nName.Url              : ['http://A', 'http://B', NULL]\n</code></pre>\n<p>This is a columnar representation of nested data without first normalizing<br />\nit into a relational form.</p>\n<p>The concrete values exist at the leaf of the nested data. A path of fields<br />\nfrom root to leaf maps to a column. This schema maps to the following<br />\ncolumns:</p>\n<ol>\n<li>DocId</li>\n<li>Links.Backward</li>\n<li>Links.Forward</li>\n<li>Name.Language.Code</li>\n<li>Name.Language.Country</li>\n<li>Name.Url</li>\n</ol>\n<p>The schema contains</p>\n<hr />\n<p>The representation of relational data in columnar format is intuitive. Each<br />\ncolumn value is stored contiguously. To reassemble a record all you need is<br />\nthe index of the value in a column.</p>\n<p>This is a logical representation of columnar storage for a relation with<br />\nfour columns - BookID, Title, Author &amp; Year.</p>\n<pre><code>BookIDs:    [101, 102, 103, 104]\nTitles:     [&quot;Deep Work&quot;, &quot;Designing Data-Intensive Applications&quot;, &quot;The Soul of A New Machine&quot;, &quot;Hackers &amp; Painters&quot;]\nAuthors:    [&quot;Cal Newport&quot;, &quot;Martin Kleppmann&quot;, &quot;Tracy Kidder&quot;, &quot;Paul Graham&quot;]\nYears:      [2016, 2017, 1981, 2004]\n</code></pre>\n<p>To reassemble the third record, the column values at index 2 are retrieved:</p>\n<pre><code>BookIDs[2]  = 103\nTitles[2]   = &quot;The Soul of A New Machine&quot;\nAuthors[2]  = &quot;Tracy Kidder&quot;\nYears[2]    = 1981\n</code></pre>\n<p>A nested value is a tree structure with values found at the leaf node. The<br />\ncolumn name is the path from root to leaf node. There are as many columns as<br />\nunique paths in the tree. Let us look at a sample nested value:</p>\n<pre><code>DocId: 10\nLinks\n  Forward: 20\n  Forward: 40\n  Forward: 60\nName\n  Language\n    Code: 'en-us'\n    Country: 'us'\n  Language\n    Code: 'en'\n  Url: 'http://A'\nName\n  Url: 'http://B'\nName\n  Language\n    Code: 'en-gb'\n    Country: 'gb'\n</code></pre>\n<p>This value has the following unique columns:</p>\n<ol>\n<li>DocId</li>\n<li>Links.Forward</li>\n<li>Name.Language.Code</li>\n<li>Name.Language.Country</li>\n<li>Name.Url</li>\n</ol>\n<p>After extracting the values from the leaf nodes it can be represented in a<br />\ncolumnar format like the relational data:</p>\n<pre><code>DocId:                [10]\nLinks.Forward:        [20, 40, 60]\nName.Language.Code:   ['en-us', 'en', 'en-gb']\nName.Language.Country:['us', 'gb']\nName.Url:             ['http://A', 'http://B']\n</code></pre>\n<p>In the above representation the structural information is lost. It is<br />\nimpossible to reassemble the nested value from the columns values like this:</p>\n<pre><code>Name[0].Language[0].Code[0] = 'en-us'\nName[0].Language[1].Code[0] = 'en'\nName[2].Language[0].Code[0] = 'en-gb'\n</code></pre>\n<p>Between 'en' and 'en-gb' the path Name[1] terminates early. This<br />\nrepresentation contains only values which are present in the value. It does<br />\nnot capture values which are missing because the path terminated early.</p>\n<p>TODO:</p>\n<p>-[ ] Data Model<br />\n-[ ] Missing Values<br />\n-[ ] Definition Levels<br />\n-[ ] Repetition Levels</p>\n<hr />\n<p>So how are nested values represented in columnar storage?</p>\n<p>This is one of the novel contributions from<br />\nthe <a href=\"https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/36632.pdf\">VLDB 2010 paper - Dremel: Interactive Analysis of<br />\nWeb-Scale Datasets</a>.</p>\n<blockquote>\n<p>We describe a novel columnar storage format for nested<br />\ndata. We present algorithms for dissecting nested records<br />\ninto columns and reassembling them.</p>\n</blockquote>\n<hr />\n<h2 id=\"scratch\" tabindex=\"-1\">Scratch <a class=\"direct-link\" href=\"https://jacobsherin.com/posts/dremel-column-striping/#scratch\" aria-hidden=\"true\">#</a></h2>\n<pre><code>Name\n Language\n  Code: 'en-us'\n  Country: 'us'\n Language\n  Code: 'en'\nName\nName\n Language\n  Code: 'en-gb'\n  Country: 'gb'\n</code></pre>\n<ul>\n<li>See both above and below are the same thing</li>\n<li>The bottom encoding looks weird because of the extra columns with some<br />\nnumbers. We'll soon get to how it is computed.</li>\n<li>Those numbers make it possible for us to reassemble the original nested<br />\nrecord shown above given the table below. It's neat!</li>\n<li>NULL is used to signal the absence of a value in the nested record.</li>\n<li>But why do we need this?</li>\n<li>Interactive ad-hoc querying using a database engine built for the purpose of<br />\nanalytics like ClickHouse, DuckDB etc. Not PostgreSQL or MySQL.</li>\n<li>Analytics queries are primarily aggregations. If you only need to find all<br />\nthe distinct Name.Language.Country you only need to read the Name.Language.<br />\nCountry column. Projections are efficient because you don't have to read<br />\nthe entire nested value just to get a single column.</li>\n<li>Adopted by Parquet/Arrow though the encoding differs slightly, the<br />\nprinciples remain the same. The principle is preserving the structure of<br />\nthe nested record</li>\n</ul>\n<div style=\"display: flex; gap: 16px;\">\n<div>\n<table>\n<thead>\n<tr>\n<th><strong>Name.Language.Country</strong></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>value</strong></td>\n<td><strong>r</strong></td>\n<td><strong>d</strong></td>\n</tr>\n<tr>\n<td>en-us</td>\n<td>0</td>\n<td>2</td>\n</tr>\n<tr>\n<td>en</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>NULL</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>en-gb</td>\n<td>1</td>\n<td>2</td>\n</tr>\n<tr>\n<td>NULL</td>\n<td>0</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div>\n<table>\n<thead>\n<tr>\n<th><strong>Name.Language.Code</strong></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>value</strong></td>\n<td><strong>r</strong></td>\n<td><strong>d</strong></td>\n</tr>\n<tr>\n<td>us</td>\n<td>0</td>\n<td>3</td>\n</tr>\n<tr>\n<td>NULL</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>NULL</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>gb</td>\n<td>1</td>\n<td>3</td>\n</tr>\n<tr>\n<td>NULL</td>\n<td>0</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n",
      "date_published": "2025-04-21T00:00:00Z"
    },{
      "id": "https://jacobsherin.com/posts/fourthpost/",
      "url": "https://jacobsherin.com/posts/fourthpost/",
      "title": "This is my fourth post.",
      "content_html": "<p>Leverage agile frameworks to provide a robust synopsis for high level overviews. Iterative approaches to corporate strategy foster collaborative thinking to further the overall value proposition. Organically grow the holistic world view of disruptive innovation via workplace diversity and empowerment.</p>\n<p>Bring to the table win-win survival strategies to ensure proactive domination. At the end of the day, going forward, a new normal that has evolved from generation X is on the runway heading towards a streamlined cloud solution. User generated content in real-time will have multiple touchpoints for offshoring.</p>\n<h2 id=\"section-header\" tabindex=\"-1\">Section Header <a class=\"direct-link\" href=\"https://jacobsherin.com/posts/fourthpost/#section-header\" aria-hidden=\"true\">#</a></h2>\n<p>Capitalize on low hanging fruit to identify a ballpark value added activity to beta test. Override the digital divide with additional clickthroughs from DevOps. Nanotechnology immersion along the information highway will close the loop on focusing solely on the bottom line.</p>\n",
      "date_published": "2018-09-30T00:00:00Z"
    },{
      "id": "https://jacobsherin.com/posts/thirdpost/",
      "url": "https://jacobsherin.com/posts/thirdpost/",
      "title": "This is my third post.",
      "content_html": "<p>Leverage agile frameworks to provide a robust synopsis for high level overviews. Iterative approaches to corporate strategy foster collaborative thinking to further the overall value proposition. Organically grow the holistic world view of disruptive innovation via workplace diversity and empowerment.</p>\n<pre class=\"language-diff-js\"><code class=\"language-diff-js\">// this is a command<br />function myCommand() {<br /><span class=\"token inserted-sign inserted language-js\"><span class=\"token prefix inserted\">+</span>\t<span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br /></span><br /><span class=\"token deleted-sign deleted language-js\"><span class=\"token prefix deleted\">-</span>\tcounter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><br /></span><br />}<br /><br />// Test with a line break above this line.<br />console.log('Test');</code></pre>\n<p>Bring to the table win-win survival strategies to ensure proactive domination. At the end of the day, going forward, a new normal that has evolved from generation X is on the runway heading towards a streamlined cloud solution. User generated content in real-time will have multiple touchpoints for offshoring.</p>\n<h2 id=\"section-header\" tabindex=\"-1\">Section Header <a class=\"direct-link\" href=\"https://jacobsherin.com/posts/thirdpost/#section-header\" aria-hidden=\"true\">#</a></h2>\n<p>Capitalize on low hanging fruit to identify a ballpark value added activity to beta test. Override the digital divide with additional clickthroughs from DevOps. Nanotechnology immersion along the information highway will close the loop on focusing solely on the bottom line.</p>\n",
      "date_published": "2018-08-24T00:00:00Z"
    },{
      "id": "https://jacobsherin.com/posts/secondpost/",
      "url": "https://jacobsherin.com/posts/secondpost/",
      "title": "This is my second post.",
      "content_html": "<p>Leverage agile frameworks to provide a robust synopsis for high level overviews. Iterative approaches to corporate strategy foster collaborative thinking to further the overall value proposition. Organically grow the holistic world view of disruptive innovation via workplace diversity and empowerment.</p>\n<h2 id=\"section-header\" tabindex=\"-1\">Section Header <a class=\"direct-link\" href=\"https://jacobsherin.com/posts/secondpost/#section-header\" aria-hidden=\"true\">#</a></h2>\n<p><a href=\"https://jacobsherin.com/posts/firstpost/\">First post</a><br />\n<a href=\"https://jacobsherin.com/posts/thirdpost/\">Third post</a></p>\n<p>Bring to the table win-win survival strategies to ensure proactive domination. At the end of the day, going forward, a new normal that has evolved from generation X is on the runway heading towards a streamlined cloud solution. User generated content in real-time will have multiple touchpoints for offshoring.</p>\n<p>Capitalize on low hanging fruit to identify a ballpark value added activity to beta test. Override the digital divide with additional clickthroughs from DevOps. Nanotechnology immersion along the information highway will close the loop on focusing solely on the bottom line.</p>\n",
      "date_published": "2018-07-04T00:00:00Z"
    },{
      "id": "https://jacobsherin.com/posts/firstpost/",
      "url": "https://jacobsherin.com/posts/firstpost/",
      "title": "This is my first post.",
      "content_html": "<p>Leverage agile frameworks to provide a robust synopsis for high level overviews. Iterative approaches to corporate strategy foster collaborative thinking to further the overall value proposition. Organically grow the holistic world view of disruptive innovation via workplace diversity and empowerment.</p>\n<p>Bring to the table win-win survival strategies to ensure proactive domination. At the end of the day, going forward, a new normal that has evolved from generation X is on the runway heading towards a streamlined cloud solution. User generated content in real-time will have multiple touchpoints for offshoring.</p>\n<h2 id=\"section-header\" tabindex=\"-1\">Section Header <a class=\"direct-link\" href=\"https://jacobsherin.com/posts/firstpost/#section-header\" aria-hidden=\"true\">#</a></h2>\n<p>Capitalize on low hanging fruit to identify a ballpark value added activity to beta test. Override the digital divide with additional clickthroughs from DevOps. Nanotechnology immersion along the information highway will close the loop on focusing solely on the bottom line.</p>\n<pre class=\"language-diff-js\"><code class=\"language-diff-js\">// this is a command<br />function myCommand() {<br /><span class=\"token inserted-sign inserted language-js\"><span class=\"token prefix inserted\">+</span>\t<span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br /><span class=\"token prefix inserted\">+</span>\tcounter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><br /></span>}<br /><br />// Test with a line break above this line.<br />console.log('Test');</code></pre>\n",
      "date_published": "2018-05-01T00:00:00Z"
    }
  ]
}
