<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>jcsherin</title>
	<subtitle>jcsherin writes about programming</subtitle>
	
	<link href="https://jacobsherin.com/feed/feed.xml" rel="self"/>
	<link href="https://jacobsherin.com/"/>
	<updated>2025-06-06T00:00:00Z</updated>
	<id>https://example.com/</id>
	<author>
		<name>Your Name Here</name>
		<email>youremailaddress@example.com</email>
	</author>
	
	<entry>
		<title>Record Shredding: Part 1</title>
		<link href="https://jacobsherin.com/posts/2025-06-06-record-shredding-part-1/"/>
		<updated>2025-06-06T00:00:00Z</updated>
		<id>https://jacobsherin.com/posts/2025-06-06-record-shredding-part-1/</id>
		<content type="html">&lt;style&gt;
th, td {
  text-align: center;
  vertical-align: top;
  padding: 8px 16px;
}

.table-container {
  display: flex;
  justify-content: space-around;
  gap: 20px;
}

.col-view td:nth-child(1), .col-view th:nth-child(1):not([colspan]) { background-color: #FFFFE0; }
.col-view td:nth-child(2), .col-view th:nth-child(2) { background-color: #FFDAB9; }
.col-view td:nth-child(3), .col-view th:nth-child(3) { background-color: #E6E6FA; }
.col-view td:nth-child(4), .col-view th:nth-child(4) { background-color: #DDFADD; }
.col-view td:nth-child(5), .col-view th:nth-child(5) { background-color: #F0F8FF; }

.row-view tr:nth-child(1) td { background-color: #FFFFE0; }
.row-view tr:nth-child(2) td { background-color: #FFDAB9; }
.row-view tr:nth-child(3) td { background-color: #E6E6FA; }
.row-view tr:nth-child(4) td { background-color: #DDFADD; }

.col-view {
  border-spacing: 8px 0;
}

.row-view {
  border-spacing: 0 8px;
}

.record-container {
  display: flex;
}

.default-value {
  color: #555555;
}

/* to be removed later */
body {
  max-width: 800px;
  font-size: 20px;
  margin: 0 auto 220px;
}
&lt;/style&gt;
&lt;h1 id=&quot;introduction&quot; tabindex=&quot;-1&quot;&gt;Introduction &lt;a class=&quot;direct-link&quot; href=&quot;https://jacobsherin.com/posts/2025-06-06-record-shredding-part-1/#introduction&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;In the 2010 VLDB
paper, &lt;a href=&quot;https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/36632.pdf&quot;&gt;Dremel: Interactive Analysis of Web-Scale Datasets&lt;/a&gt;
reports being able to run ad-hoc analytical queries over a &lt;em&gt;trillion-row&lt;/em&gt; tables in seconds. The contents of the
table were nested data structures and not flat, relational data. The compressed size of the dataset exceeded 100TB
and the nested data structures contained around 50 fields.&lt;/p&gt;
&lt;p&gt;The Dremel (underlying engine of Google BigQuery) folks invented a representation which for the first time made it
possible to represent nested data structures directly in the internal storage format of Dremel. This reduced the
average query execution time from hours to seconds. The provide the example of a query to compute the average number
of terms in a field. To compute the results the query had to scan 87TB of records stored in its original form,
compared to just 0.5TB of compressed data in the new representation. That is an impressive reduction in data scanned
from storage to compute query results.&lt;/p&gt;
&lt;p&gt;This technique was directly adopted by Apache Parquet file format for efficiently storing and querying nested data
structures.&lt;/p&gt;
&lt;p&gt;The design of the Dremel encoding is deceptively simple. In an attempt to implement my own version of this from
scratch - &lt;a href=&quot;https://github.com/jcsherin/denester&quot;&gt;https://github.com/jcsherin/denester&lt;/a&gt;, I kept thinking I understand this enough to implement it and I can
also convince myself that it works correctly, but the intuition behind it was missing. Slogging through the
implementation after several tiny moments of epiphany, I finally understood its essence. This blog post is an
attempt to write it down not as a how to implement it, but really get to the bottom of why it works through first
principles reasoning and capture some of the magic and elegance in its design.&lt;/p&gt;
&lt;h1 id=&quot;record-shredding-and-assembly&quot; tabindex=&quot;-1&quot;&gt;Record Shredding And Assembly &lt;a class=&quot;direct-link&quot; href=&quot;https://jacobsherin.com/posts/2025-06-06-record-shredding-part-1/#record-shredding-and-assembly&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Conceptually, record shredding is a flattening of a nested data structure into a flat, relational format. Record
assembly is the reconstructing of that shredded structure back into its original nested form.&lt;/p&gt;
&lt;p&gt;Below is a visualization of a &lt;em&gt;UserProfile&lt;/em&gt; object which has three levels of nesting.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://jacobsherin.com/posts/2025-06-06-record-shredding-part-1/img/bobthebuilder.svg&quot; alt=&quot;Example nested data structure&quot; /&gt;
&lt;em&gt;Figure 1. Visualization of a nested data structure&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The primitive values appear in the leaf nodes at levels two and three. It is common to use the dot-separated notation to
represent accessing a leaf node value (e.g. &lt;em&gt;preferences.theme&lt;/em&gt; = &lt;em&gt;&amp;quot;dark&amp;quot;&lt;/em&gt;). The array index notation is used to
represent accessing the individual values in the repeated (array) field like &lt;em&gt;tags&lt;/em&gt; (e.g. tags[0] = &lt;em&gt;&amp;quot;builder&amp;quot;&lt;/em&gt;, tags
[1] = &lt;em&gt;&amp;quot;diy&amp;quot;&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;After shredding the flattened &lt;em&gt;UserProfile&lt;/em&gt; value looks like any other row in a relational table. The two array values
in &lt;em&gt;tags&lt;/em&gt; are expanded into separate rows. This is similar to using the &lt;em&gt;UNNEST&lt;/em&gt; function in SQL which takes the
array value in &lt;em&gt;tags&lt;/em&gt; as input, and returns rows for each element in the array.&lt;/p&gt;
&lt;table class=&quot;col-view&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th colspan=&quot;5&quot;&gt;Flattened UserProfile After Record Shredding&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;uid&lt;/th&gt;
      &lt;th&gt;displayName&lt;/th&gt;
      &lt;th&gt;tags&lt;/th&gt;
      &lt;th&gt;preferences.theme&lt;/th&gt;
      &lt;th&gt;preferences.notifications&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;9012&lt;/td&gt;
      &lt;td&gt;Bob The Builder&lt;/td&gt;
      &lt;td&gt;builder&lt;/td&gt;
      &lt;td&gt;dark&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9012&lt;/td&gt;
      &lt;td&gt;Bob The Builder&lt;/td&gt;
      &lt;td&gt;diy&lt;/td&gt;
      &lt;td&gt;dark&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;record-assembly&quot; tabindex=&quot;-1&quot;&gt;Record Assembly &lt;a class=&quot;direct-link&quot; href=&quot;https://jacobsherin.com/posts/2025-06-06-record-shredding-part-1/#record-assembly&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Next record assembly takes these row values and the column names as input, to fully reconstruct the nested data
structure back to its original form.&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;uid&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;9012&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;displayName&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Bob The Builder&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;tags&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;builder&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;diy&quot;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;preferences&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;theme&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;dark&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;notifications&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Record assembly also works with just a subset of columns. This is a useful feature which closely matches real-world
usage. Most queries only include a small set of columns relevant to the query. There is no good reason to materialize
the a complete &lt;em&gt;UserProfile&lt;/em&gt; if the query requires only parts of it.&lt;/p&gt;
&lt;p&gt;If the columns specified in the query are &lt;em&gt;uid&lt;/em&gt; and &lt;em&gt;preferences.notifications&lt;/em&gt; then record assembly has to read
only these columns. It can skip the remaining columns which are not relevant to the query. The reassembled
&lt;em&gt;UserProfile&lt;/em&gt; object preserves its original structure but only contains these fields:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;uid&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;9012&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;preferences&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;notifications&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;columnar-data-layout&quot; tabindex=&quot;-1&quot;&gt;Columnar Data Layout &lt;a class=&quot;direct-link&quot; href=&quot;https://jacobsherin.com/posts/2025-06-06-record-shredding-part-1/#columnar-data-layout&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It is implied above that record shredding and assembly uses a columnar data layout. And this is critical for
reassembly of partial projection from the shredded values in storage. It is an efficient representation because only
the subset of columns required for reassembly have to be scanned.&lt;/p&gt;
&lt;p&gt;Typically relational data is associated with row storage. If you access the row (say &lt;em&gt;id&lt;/em&gt; = 103) it retrieves all
the related attributes from storage and writes &lt;em&gt;(103, &amp;quot;Eve&amp;quot;, &amp;quot;eavesdropper&amp;quot;)&lt;/em&gt; to memory. This matches the access
patterns of transactional applications which needs to read or write a single row or a very small set of rows at a
time. The row storage is optimized for heavy read-write workloads which works on a single row or a very small set of
rows.&lt;/p&gt;
&lt;table class=&quot;row-view&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th colspan=&quot;3&quot;&gt;Row Format&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;id&lt;/th&gt;
      &lt;th&gt;username&lt;/th&gt;
      &lt;th&gt;role&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;101&lt;/td&gt;
      &lt;td&gt;Alice&lt;/td&gt;
      &lt;td&gt;sender&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;102&lt;/td&gt;
      &lt;td&gt;Bob&lt;/td&gt;
      &lt;td&gt;receiver&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;103&lt;/td&gt;
      &lt;td&gt;Eve&lt;/td&gt;
      &lt;td&gt;eavesdropper&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;104&lt;/td&gt;
      &lt;td&gt;Trudy&lt;/td&gt;
      &lt;td&gt;intruder&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The row storage format is not optimized for access patterns of analytical queries. For example to compute the value
of &lt;em&gt;COUNT (DISTINCT role)&lt;/em&gt; all data will have to be retrieved from storage, written to memory and scanned to
compute the result. Even though the &lt;em&gt;id&lt;/em&gt; and &lt;em&gt;username&lt;/em&gt; columns serves no purpose in computing the final result,
they are still materialized into memory from storage. This is unavoidable because row value are stored next to each
other.&lt;/p&gt;
&lt;p&gt;If the data is instead stored in a columnar layout, only the &lt;em&gt;role&lt;/em&gt; column needs to be scanned to compute the final
result. In this layout the values of a column are stored next to each other.&lt;/p&gt;
&lt;table class=&quot;col-view&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th colspan=&quot;3&quot;&gt;Columnar Format&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;id&lt;/th&gt;
      &lt;th&gt;username&lt;/th&gt;
      &lt;th&gt;role&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;101&lt;/td&gt;
      &lt;td&gt;Alice&lt;/td&gt;
      &lt;td&gt;sender&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;102&lt;/td&gt;
      &lt;td&gt;Bob&lt;/td&gt;
      &lt;td&gt;receiver&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;103&lt;/td&gt;
      &lt;td&gt;Eve&lt;/td&gt;
      &lt;td&gt;eavesdropper&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;104&lt;/td&gt;
      &lt;td&gt;Trudy&lt;/td&gt;
      &lt;td&gt;intruder&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In database terms this optimization is known as &lt;em&gt;projection pushdown&lt;/em&gt;. It helps optimize the amount of disk I/O
necessary for scanning data from physical storage.&lt;/p&gt;
&lt;h1 id=&quot;schema&quot; tabindex=&quot;-1&quot;&gt;Schema &lt;a class=&quot;direct-link&quot; href=&quot;https://jacobsherin.com/posts/2025-06-06-record-shredding-part-1/#schema&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The schema is the single source of truth which is used for implementing record shredding and assembly.&lt;/p&gt;
&lt;p&gt;A schema is a collection of &lt;em&gt;fields&lt;/em&gt;. Each &lt;em&gt;field&lt;/em&gt; has a name, a data type and a marker which identifies if the
field is optional or not.&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;repeated&lt;/em&gt; field is an array of values. The data type can be either a primitive type or even a struct data type. The
order of values is important and is preserved during shredding and reassembly.&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;Struct&lt;/em&gt; data type adds another level of nesting and contains one or more fields.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://jacobsherin.com/posts/2025-06-06-record-shredding-part-1/img/schema_userprofile.svg&quot; alt=&quot;UserProfile Schema&quot; /&gt;
&lt;em&gt;Figure 2. Schema of UserProfile object&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The example below (same as Figure 1.) is a valid construction of the &lt;em&gt;UserProfile&lt;/em&gt; schema. The &lt;em&gt;preferences.language&lt;/em&gt;
property is not present in this instance. In the schema, the &lt;em&gt;language&lt;/em&gt; field is marked as an optional field.&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;uid&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;9012&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;displayName&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Bob The Builder&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;tags&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;builder&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;diy&quot;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;preferences&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;theme&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;dark&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;notifications&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the next example, the &lt;em&gt;preferences&lt;/em&gt; property is not present. In the schema, the &lt;em&gt;preferences&lt;/em&gt; field is marked as an
optional field.&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;uid&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;1234&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;displayName&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Alice Wonderland&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;tags&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;reader&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;dreamer&quot;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the next example, the &lt;em&gt;preferences.language&lt;/em&gt; and &lt;em&gt;preferences.notifications&lt;/em&gt; properties are not present. In the
schema both the fields are marked as optional.&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;uid&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;5678&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;displayName&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Chris Coder&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;tags&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;developer&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;python&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;oss&quot;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;preferences&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;theme&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;light&quot;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The recurring theme here is that by looking at an instance of a nested structure by itself, it is not possible to
identify which properties are missing from it. We need the schema to validate an instance and also know which
properties are not present in it.&lt;/p&gt;
&lt;h1 id=&quot;the-dremel-encoding&quot; tabindex=&quot;-1&quot;&gt;The Dremel Encoding &lt;a class=&quot;direct-link&quot; href=&quot;https://jacobsherin.com/posts/2025-06-06-record-shredding-part-1/#the-dremel-encoding&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;A desirable property of record shredding is that it should not inflate the size of the stored nested data structure.
If the shredded encoding ended up being smaller than directly storing the nested data structure itself, that will
be a great win.&lt;/p&gt;
&lt;p&gt;The abstract representation of record shredding introduced in the beginning is not well-designed. The most obvious
issue is the data redundancy required for the &lt;em&gt;tags&lt;/em&gt; repeated field. The number of rows in this representation
depends on the cardinality (number of elements) of the &lt;em&gt;tags&lt;/em&gt; property.&lt;/p&gt;
&lt;p&gt;Also to keep complexity low without sacrificing the essence of how record shredding works we deliberately did not tackle
the problem of how missing properties should be represented.&lt;/p&gt;
&lt;p&gt;The three examples of &lt;em&gt;UserProfile&lt;/em&gt; from above after shredding using the Dremel technique is represented as shown below.&lt;/p&gt;
&lt;table class=&quot;col-view&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th colspan=&quot;5&quot;&gt;Dremel Encoding&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;uid&lt;/th&gt;
      &lt;th&gt;displayName&lt;/th&gt;
      &lt;th&gt;tags&lt;/th&gt;
      &lt;th&gt;preferences.theme&lt;/th&gt;
      &lt;th&gt;preferences.notifications&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1234&lt;/td&gt;
      &lt;td&gt;Alice Wonderland&lt;/td&gt;
      &lt;td&gt;reader&lt;/td&gt;
      &lt;td&gt;light&lt;/td&gt;
      &lt;td&gt;false&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5678&lt;/td&gt;
      &lt;td&gt;Chris Coder&lt;/td&gt;
      &lt;td&gt;dreamer&lt;/td&gt;
      &lt;td&gt;dark&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9012&lt;/td&gt;
      &lt;td&gt;Bob The Builder&lt;/td&gt;
      &lt;td&gt;developer&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;python&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;oss&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;builder&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;diy&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This representation wastes no space for representing properties which are missing in the values. The cardinality of
a repeated field like &lt;em&gt;tags&lt;/em&gt; has no effect on other columns. This representation ends up taking less space than
directly storing the &lt;em&gt;UserProfile&lt;/em&gt; objects.&lt;/p&gt;
&lt;p&gt;But they do not line up nicely into rows which informs you where a record begins and ends just by visual inspection.
So if you are thinking there is not enough information here to be able to reassemble the original values, you are on
the right track.&lt;/p&gt;
&lt;h2 id=&quot;structure-is-metadata&quot; tabindex=&quot;-1&quot;&gt;Structure is Metadata &lt;a class=&quot;direct-link&quot; href=&quot;https://jacobsherin.com/posts/2025-06-06-record-shredding-part-1/#structure-is-metadata&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A schema definition leads to a variety of possible structures. This can be seen in the below visualization of the three
&lt;em&gt;UserProfile&lt;/em&gt; examples introduced earlier. Without the distraction of labels, we can look at the structure by itself.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://jacobsherin.com/posts/2025-06-06-record-shredding-part-1/img/structure_userprofile.svg&quot; alt=&quot;Tree node illustration of UserProfile objects&quot; /&gt;
&lt;em&gt;Figure 3. Structure of UserProfile Objects&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;What causes the structural variability?&lt;/p&gt;
&lt;p&gt;If any of the optional fields are not present, or if a repeated (array) field is empty it manifests as a hole in the
structure. The cardinality of the repeated field also modifies the structure.&lt;/p&gt;
&lt;p&gt;The key insight in Dremel encoding is to distill both these sources of structural variability into a computed
numeric value during the process of record shredding. By interpreting the values extracted from the leaf nodes
together with the two derived metadata values the original nested data structure can be reassembled.&lt;/p&gt;
&lt;p&gt;In Dremel these metadata columns are known as &lt;em&gt;definition levels&lt;/em&gt; and &lt;em&gt;repetition levels&lt;/em&gt;.&lt;/p&gt;
&lt;h1 id=&quot;how-definition-levels-work&quot; tabindex=&quot;-1&quot;&gt;How Definition Levels Work &lt;a class=&quot;direct-link&quot; href=&quot;https://jacobsherin.com/posts/2025-06-06-record-shredding-part-1/#how-definition-levels-work&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Consider a single nested path of interleaving optional and repeated fields. The definition level is computed by
counting the optional fields which are present, and the repeated fields which are present and not empty.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://jacobsherin.com/posts/2025-06-06-record-shredding-part-1/img/example_def_levels.svg&quot; alt=&quot;Annotated definition levels for path with interleaving optional and repeated fields&quot; /&gt;
&lt;em&gt;Figure 4. Annotated definition levels for a nested path&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The example path &lt;em&gt;a.b.c.d.e&lt;/em&gt; shown above contains three optional fields and two repeated fields. The definition
levels for this path will be in the range (inclusive) [0, 5]. The calculation is simple. If a field is present then
we increment the definition level count. We continue doing this for each optional and repeated field until the path
terminates. The final count tell us exact point at which a path terminates.&lt;/p&gt;
&lt;p&gt;In this example a definition level of zero indicates that the path is not present in the data instance. If a path
defined in the schema contains only required fields then the definition levels will be always zero for all values.
In this case we do not need to compute or store the definition levels. For example, the &lt;em&gt;uid&lt;/em&gt; is a required field in
the &lt;em&gt;UserProfile&lt;/em&gt; schema. We can simply skip computing definition levels as there are no optional or repeated fields
in this path.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;No.&lt;/th&gt;
      &lt;th&gt;Path&lt;/th&gt;
      &lt;th&gt;Definition Level&lt;/th&gt;
      &lt;th&gt;Notes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Ø&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;Empty path. The field &lt;em&gt;a&lt;/em&gt; is not present.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;a&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;The repeated field &lt;em&gt;b&lt;/em&gt; is empty and not present.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;a.b&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;The optional field &lt;em&gt;c&lt;/em&gt; is not present.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4.&lt;/td&gt;
      &lt;td&gt;a.b.c&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;The repeated field &lt;em&gt;d&lt;/em&gt; is not present.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;a.b.c.d&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;The optional field &lt;em&gt;e&lt;/em&gt; is not present.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6.&lt;/td&gt;
      &lt;td&gt;a.b.c.d.e&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;All the fields in this path are present.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&quot;how-repetition-levels-work&quot; tabindex=&quot;-1&quot;&gt;How Repetition Levels Work &lt;a class=&quot;direct-link&quot; href=&quot;https://jacobsherin.com/posts/2025-06-06-record-shredding-part-1/#how-repetition-levels-work&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;When compared to definition levels the computation of repetition levels is complicated.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://jacobsherin.com/posts/2025-06-06-record-shredding-part-1/img/example_1_rep_levels.svg&quot; alt=&quot;Repeated field with same value sequence but different arrangements&quot; /&gt;
&lt;em&gt;Figure 5. Nested repeated fields with similar values but different structures&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;All the examples in figure 5. have the same sequence of values. The repetition levels is the key metadata which has
to be computed during shredding which will allow us to reassemble any of them back to its original form.&lt;/p&gt;
&lt;p&gt;The repetition level is a count of the repeated fields in a path. So the &lt;em&gt;n&lt;sup&gt;th&lt;/sup&gt;&lt;/em&gt; repeated field will have a
repetition level of &lt;em&gt;n&lt;/em&gt;. Non-repeated fields contribute to overall nesting of the structure but do not increment the
repetition level count.&lt;/p&gt;
&lt;p&gt;Let us begin by computing the repetition levels for &lt;em&gt;Record 1&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For simplicity let us substitute the outer list with variable names like &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; instead of the actual list
contents to reduce verbosity. So the outer list is &lt;code&gt;[x, y]&lt;/code&gt; where &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; represents the original inner list
elements.&lt;/p&gt;
&lt;p&gt;The first rule says, the repetition level of the first list element is the same as that of its parent repeated field.&lt;/p&gt;
&lt;p&gt;The outer list is the first repeated field in this path and its repetition level is one. Since it does not have a
parent repeated field, we treat this as a special case and give &lt;em&gt;x&lt;/em&gt; the repetition level of zero (instead of one) as
an application of the first rule.&lt;/p&gt;
&lt;p&gt;The second rule is that every subsequent element within that same list will have a repetition level equal to the
repeated field.&lt;/p&gt;
&lt;p&gt;The outer list has a repetition level of one. So the remaining elements which is just &lt;em&gt;y&lt;/em&gt; will have a repetition
level of one.&lt;/p&gt;
&lt;p&gt;What we have at this point is an intermediate result. The inner lists have not been evaluated.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;&lt;th colspan=&quot;3&quot;&gt;Intermediate Result&lt;/th&gt;&lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;value&lt;/th&gt;
      &lt;th&gt;contents&lt;/th&gt;
      &lt;th&gt;repetition level&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;x&lt;/td&gt;
      &lt;td&gt;[1, 2, 3]&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;y&lt;/td&gt;
      &lt;td&gt;[4, 5, 6]&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Let us next process &lt;em&gt;x&lt;/em&gt; which is &lt;em&gt;[1, 2, 3]&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The inner list is the second repeated field, so it has a repetition level of two. For the first element &lt;em&gt;1&lt;/em&gt; we apply
&lt;em&gt;Rule 1&lt;/em&gt;. The repetition level of &lt;em&gt;x&lt;/em&gt; is zero, so the repetition level of &lt;em&gt;1&lt;/em&gt; is also zero. For the remaining elements
&lt;em&gt;2&lt;/em&gt; and &lt;em&gt;3&lt;/em&gt;, the repetition level is two because this is the second repeated field.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;&lt;th colspan=&quot;2&quot;&gt;Intermediate Result&lt;/th&gt;&lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;value&lt;/th&gt;
      &lt;th&gt;repetition level&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Let us now process &lt;em&gt;y&lt;/em&gt; which is &lt;em&gt;[4, 5, 6]&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The repetition level is two for the inner list because it is the second repeated field. For the first element &lt;em&gt;4&lt;/em&gt; we
again apply Rule 1. The repetition level of parent &lt;em&gt;y&lt;/em&gt; is one, so the repetition level of &lt;em&gt;4&lt;/em&gt; is also 1. For the
remaining elements &lt;em&gt;5&lt;/em&gt; and &lt;em&gt;6&lt;/em&gt; the repetition level is two because it is same as the repetition level of the inner list.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;&lt;th colspan=&quot;2&quot;&gt;Intermediate Result&lt;/th&gt;&lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;value&lt;/th&gt;
      &lt;th&gt;repetition level&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;All the repeated fields have been counted and all list elements accounted for. Now all we have to do is merge the
intermediate results.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;&lt;th colspan=&quot;2&quot;&gt;Final Result&lt;/th&gt;&lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;value&lt;/th&gt;
      &lt;th&gt;repetition level&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;By recursively applying the process to all repeated fields the repetition levels can be computed for other records
as well. This is the final computed repetition levels without the intermediate work shown. You are free to verify
its correctness by trying to apply the rules and trying to compute the values by yourself.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th colspan=&quot;3&quot;&gt;Repetition Levels&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;values&lt;/th&gt;
      &lt;th&gt;Record 1&lt;/th&gt;
      &lt;th&gt;Record 2&lt;/th&gt;
      &lt;th&gt;Record 3&lt;/th&gt;
      &lt;th&gt;definition levels&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://jacobsherin.com/posts/2025-06-06-record-shredding-part-1/#conclusion&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
</content>
	</entry>
	
	<entry>
		<title>An Efficient Representation for Nested Data Structures</title>
		<link href="https://jacobsherin.com/posts/dremel-column-striping/"/>
		<updated>2025-04-21T00:00:00Z</updated>
		<id>https://jacobsherin.com/posts/dremel-column-striping/</id>
		<content type="html">&lt;h1 id=&quot;outlinetoc&quot; tabindex=&quot;-1&quot;&gt;Outline/TOC &lt;a class=&quot;direct-link&quot; href=&quot;https://jacobsherin.com/posts/dremel-column-striping/#outlinetoc&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Intro/Summary
&lt;ul&gt;
&lt;li&gt;Priorly column storage used primarily for flat, relational data&lt;/li&gt;
&lt;li&gt;Interactively querying is slow and inefficient because ...&lt;/li&gt;
&lt;li&gt;Dremel solution -&amp;gt; Repetition, Definition Levels&lt;/li&gt;
&lt;li&gt;Interactively querying is now fast because of projection pushdown
optimization&lt;/li&gt;
&lt;li&gt;Deriving repetition levels,
&lt;ul&gt;
&lt;li&gt;Hard to wrap my head around why it works correctly?&lt;/li&gt;
&lt;li&gt;Moderate difficulties in implementation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Impact on open-source columnar formats which were designed later high
performance analytics.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Model of Nested Data Structures
&lt;ul&gt;
&lt;li&gt;Optional fields&lt;/li&gt;
&lt;li&gt;Repeated fields&lt;/li&gt;
&lt;li&gt;Concrete Example + Schema&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Record Assembly from subset of fields
&lt;ul&gt;
&lt;li&gt;Example 1&lt;/li&gt;
&lt;li&gt;Example 2&lt;/li&gt;
&lt;li&gt;Example 3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Challenges in shredding and assembly of nested data structures&lt;/li&gt;
&lt;li&gt;Simplified Data Model
&lt;ul&gt;
&lt;li&gt;No optional fields or repeated fields&lt;/li&gt;
&lt;li&gt;Add optional fields&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1 id=&quot;introduction&quot; tabindex=&quot;-1&quot;&gt;Introduction &lt;a class=&quot;direct-link&quot; href=&quot;https://jacobsherin.com/posts/dremel-column-striping/#introduction&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The challenge of shredding nested data structures into column values is easy
to demonstrate.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Nested Lists of Integers

      [ [1], [2], [3], [4], [5], [6] ]
outer:   0    1    2    3    4    5

      [ [1, 2], [3, 4], [5, 6] ]
inner:   0  1    0  1    0  1
outer:   0       1       2

      [ [1, 2, 3], [4, 5, 6] ]
inner:   0  1  2    0  1  2
outer:   0          1

      [ [1, 2, 3, 4], [5, 6] ]
inner:   0  1  2  3    0  1
outer:   0             1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above examples, the nested arrays have different structures but share
the same sequence of elements. After shredding the nested arrays the
physical representation of the column values ends up being identical. It is
not possible to identify the beginning of a sublist or know the size of a
sublist. This is critical information which is missing from the columnar
representation and prevents us from being able to reassemble the original
nested data structure.&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&quot;introduction-1&quot; tabindex=&quot;-1&quot;&gt;Introduction &lt;a class=&quot;direct-link&quot; href=&quot;https://jacobsherin.com/posts/dremel-column-striping/#introduction-1&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The main reason analytical query engines use a column-oriented storage
format is that a query has to read only those columns which are mentioned
in the query. This reduces the amount of data which needs to be scanned and
thereby speeds up query execution.&lt;/p&gt;
&lt;p&gt;The Dremel paper, &amp;quot;Dremel: Interactive Analysis of Web-Scale Datasets&amp;quot;
introduced a novel representation for nested data structures in columnar
storage. The data extracted from the nested data structure is annotated with
derived metadata: repetition and definition levels. This is known as record
shredding. The reconstruction of the original nested data structure is then
completed by reading back the column data together with their corresponding
repetition and definition levels. This is known as record assembly.&lt;/p&gt;
&lt;p&gt;Prior to this columnar storage was primarily used for flat, relational data.
A remarkable property of the Dremel representation is that if a query
contains only a subset of the fields which appear in the nested data
structure it could take advantage of the columnar representation and read
only the columns and metadata relevant to the query and skip the other
columns. This sped up queries by reducing the amount of data it had to read.
Where before it had to parse the entire nested data structure to access a
subset of it which was required for a query.&lt;/p&gt;
&lt;p&gt;The open source columnar file formats like Apache Parquet, Apache ORC have
since directly adopted this representation into their own implementations.&lt;/p&gt;
&lt;h1 id=&quot;anatomy-of-nested-data-structures&quot; tabindex=&quot;-1&quot;&gt;Anatomy of Nested Data Structures &lt;a class=&quot;direct-link&quot; href=&quot;https://jacobsherin.com/posts/dremel-column-striping/#anatomy-of-nested-data-structures&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;A pre-requisite for record shredding and assembly is a strongly-typed nested
data structure. This means it has a schema which is defined using an
Interface Description Language (IDL) like Apache Thrift, Protocol Buffers
etc. So this naturally excludes data in JSON format which has a flexible
interpretation and often used in a schema-on-read manner.&lt;/p&gt;
&lt;p&gt;The nested data structure may contain both optional and repeated (arrays)
fields at any level.&lt;/p&gt;
&lt;p&gt;-[ ] TODO: schema&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+-----------------+
| ProductImages   |
+-----------------+
├──[ product_id ]: 103
├──[ images ]
│  ├──[ primary_id ]: 4400
│  └──[ secondary_image_ids ]
│     ├──[0]: 4401
│     ├──[1]: 4402
│     └──[2]: 4403
└──[ at_text ]
   └──[ localizations ]
      ├──[0]
      │  ├──[ locale ]: &amp;quot;en-us&amp;quot;
      │  ├──[ description ]: &amp;quot;red running shoe, side view.&amp;quot;
      │  └──[ keywords ]
      │     ├── [0]: &amp;quot;red shoe&amp;quot;
      │     ├── [1]: &amp;quot;running&amp;quot;
      │     └── [2]: &amp;quot;sport&amp;quot;
      ├──[1]
      │  ├──[ locale ]: &amp;quot;en-au&amp;quot;
      │  └──[ keywords ]
      │     ├── [0]: &amp;quot;red runner&amp;quot;
      │     └── [1]: &amp;quot;jogging&amp;quot;
      └──[2]
         ├──[ locale ]: &amp;quot;en-gb&amp;quot;
         ├──[ description ]: &amp;quot;red trainer, profile.&amp;quot;
         └──[ keywords ]
            ├── [0]: &amp;quot;trainer&amp;quot;
            └── [1]: &amp;quot;athletics&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Column shredding (aka record shredding) is a technique for flattening deeply
nested data structures and storing them in a columnar format.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Identifier&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Full Field Path&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;product_id&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;product_id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;primary_id&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;images.primary_id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;secondary_image_ids&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;images.secondary_image_ids&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;locale&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;alt_text.localizations.locale&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;description&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;alt_text.localizations.description&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;keywords&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;alt_text.localizations.keywords&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;product_id&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;primary_id&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;secondary_image_ids&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;locale&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;description&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;keywords&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;103&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;4400&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;4401&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&amp;quot;en-us&amp;quot;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&amp;quot;red running shoe...&amp;quot;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;[&amp;quot;red shoe&amp;quot;, &amp;quot;running&amp;quot;, &amp;quot;sport&amp;quot;]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;4402&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&amp;quot;en-au&amp;quot;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;NULL&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;[&amp;quot;red runner&amp;quot;, &amp;quot;jogging&amp;quot;]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;4403&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&amp;quot;en-gb&amp;quot;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&amp;quot;red trainer, pr...&amp;quot;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;[&amp;quot;trainer&amp;quot;, &amp;quot;athletics&amp;quot;]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&quot;introduction-2&quot; tabindex=&quot;-1&quot;&gt;Introduction &lt;a class=&quot;direct-link&quot; href=&quot;https://jacobsherin.com/posts/dremel-column-striping/#introduction-2&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The main issue with flattening nested data structures is ensuring the
process is reversible. The flattened representation needs to contain both data
and the metadata which encodes the structure. From this representation, one
should be able to correctly reconstruct the original nested data structure.&lt;/p&gt;
&lt;p&gt;Typically, a query reads only a few attributes. Therefore, it is more
efficient to read only those specific attributes, rather than the entire
nested data structure. Consequently, a core desirable property of
such flattening is the ability to partially reconstruct the nested data
structure, skipping any attributes not mentioned in the query.&lt;/p&gt;
&lt;h1 id=&quot;nested-data-structure&quot; tabindex=&quot;-1&quot;&gt;Nested Data Structure &lt;a class=&quot;direct-link&quot; href=&quot;https://jacobsherin.com/posts/dremel-column-striping/#nested-data-structure&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;+-----------------+
| ProductImages   |
+-----------------+
├── [ product_id ]: 103
├── [ images ]
│   ├── [ primary_id ]: 4400
│   └── [ secondary_image_ids ]
│       ├── [0]: 4401
│       ├── [1]: 4402
│       └── [2]: 4403
└── [ alt_text ]
    └── [ localizations ]
        ├── [0]
        │   ├── [ locale ]: &amp;quot;en-us&amp;quot;
        │   ├── [ description ]: &amp;quot;red running shoe, side view.&amp;quot;
        │   └── [ keywords ]
        │       ├── [0]: &amp;quot;red shoe&amp;quot;
        │       ├── [1]: &amp;quot;running&amp;quot;
        │       └── [2]: &amp;quot;sport&amp;quot;
        ├── [1]
        │   ├── [ locale ]: &amp;quot;en-au&amp;quot;
        │   └── [ keywords ]
        │       ├── [0]: &amp;quot;red runner&amp;quot;
        │       └── [1]: &amp;quot;jogging&amp;quot;
        └── [2]
            ├── [ locale ]: &amp;quot;en-gb&amp;quot;
            ├── [ description ]: &amp;quot;red trainer, profile.&amp;quot;
            └── [ keywords ]
                ├── [0]: &amp;quot;trainer&amp;quot;
                └── [1]: &amp;quot;athletics&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;productimages:-illustrative-partial-projections&quot; tabindex=&quot;-1&quot;&gt;ProductImages: Illustrative Partial Projections &lt;a class=&quot;direct-link&quot; href=&quot;https://jacobsherin.com/posts/dremel-column-striping/#productimages:-illustrative-partial-projections&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;ProductImages_AltText
├── product_id: 103
└── alt_text
    └── localizations
        ├── [0]
        │   ├── locale: &amp;quot;en-us&amp;quot;
        │   └── description: &amp;quot;red running shoe, side view.&amp;quot;
        ├── [1]
        │   ├── locale: &amp;quot;en-au&amp;quot;
        └── [2]
            ├── locale: &amp;quot;en-gb&amp;quot;
            └── description: &amp;quot;red trainer, profile.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;ProductImages_References
├── product_id: 103
└── images
    ├── primary_id: 4400
    └── secondary_image_ids
        ├── [0]: 4401
        ├── [1]: 4402
        └── [2]: 4403
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;ProductImages_LocalizedKeywords
├── product_id: 103
└── alt_text
    └── localizations
        ├── [0]
        │   ├── locale: &amp;quot;en-us&amp;quot;
        │   └── keywords
        │       ├── [0]: &amp;quot;red shoe&amp;quot;
        │       ├── [1]: &amp;quot;running&amp;quot;
        │       └── [2]: &amp;quot;sport&amp;quot;
        ├── [1]
        │   ├── locale: &amp;quot;en-au&amp;quot;
        │   └── keywords
        │       ├── [0]: &amp;quot;red runner&amp;quot;
        │       └── [1]: &amp;quot;jogging&amp;quot;
        └── [2]
            ├── locale: &amp;quot;en-gb&amp;quot;
            └── keywords
                ├── [0]: &amp;quot;trainer&amp;quot;
                └── [1]: &amp;quot;athletics&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;data-model&quot; tabindex=&quot;-1&quot;&gt;Data Model &lt;a class=&quot;direct-link&quot; href=&quot;https://jacobsherin.com/posts/dremel-column-striping/#data-model&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;For a moment consider a nested data model with the following restrictions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;All fields are mandatory. There are never any null values.&lt;/li&gt;
&lt;li&gt;This model disallows list or array types, permitting only struct types and
scalar types (includes integers, floating-point, boolean, characters and
strings).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In such a model, the structure of any data instance perfectly mirrors its
schema. Consequently, the schema alone is sufficient to reconstruct the
original nested data structure from its flattened representation.&lt;/p&gt;
&lt;h2 id=&quot;fixed-schema&quot; tabindex=&quot;-1&quot;&gt;Fixed Schema &lt;a class=&quot;direct-link&quot; href=&quot;https://jacobsherin.com/posts/dremel-column-striping/#fixed-schema&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;ProductImages_Fixed_Schema
├── product_id (u64)
├── images
│   └── image_id (u64)
└── alt_text
    ├── locale (String)
    └── description (String)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;ProductImages_Fixed_1
├── product_id: 10785
├── images
│   └── image_id: 55001
└── alt_text
    ├── locale: &amp;quot;en-in&amp;quot;
    └── description: &amp;quot;MacBook Air 13.3\&amp;quot; (M1 chip, 8GB RAM, 256GB SSD), Space Grey.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;ProductImages_Fixed_2
├── product_id: 20488
├── images
│   └── image_id: 60773
└── alt_text
    ├── locale: &amp;quot;en-in&amp;quot;
    └── description: &amp;quot;PortaShell 13.3\&amp;quot; Laptop Sleeve, Grey, with pocket &amp;amp; handle.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we do not have to track the presence of a field because it can never be
null. In this model, since all fields are mandatory and the model disallows
lists, the cardinality of every field is therefore always one. Each field can be
either a scalar or a struct value, never a collection. We do not have to
determine if a list is empty.&lt;/p&gt;
&lt;p&gt;If both restrictions are removed then different concrete values of the same
nested schema can have many possible structures. In these cases, one cannot
reverse the flattened values using the schema alone.&lt;/p&gt;
&lt;h2 id=&quot;with-optional-field&quot; tabindex=&quot;-1&quot;&gt;With Optional Field &lt;a class=&quot;direct-link&quot; href=&quot;https://jacobsherin.com/posts/dremel-column-striping/#with-optional-field&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;ProductImages_Optional_Schema
├── product_id (u64)
├── images
│   └── image_id (u64)
└── alt_text
    ├── locale (String)
    └── description (String, optional)  // &amp;lt;--- This field is now optional
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;ProductImages_Optional_1
├── product_id: 20488
├── images
│   └── image_id: 60773
└── alt_text
    ├── locale: &amp;quot;en-in&amp;quot;
    // description is not present in this example
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;with-list-field&quot; tabindex=&quot;-1&quot;&gt;With List Field &lt;a class=&quot;direct-link&quot; href=&quot;https://jacobsherin.com/posts/dremel-column-striping/#with-list-field&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;ProductImages_List_Schema
├── product_id (u64)
└── images
    ├── primary_id (u64)
    └── secondary_image_ids (List&amp;lt;u64&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;ProductImages_List_1
├── product_id: 30501
└── images
    ├── primary_id: 77001
    └── secondary_image_ids
        ├── [0]: 77002
        ├── [1]: 77003
        └── [2]: 77004
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;ProductImages_List_2
├── product_id: 30502
└── images
    ├── primary_id: 77005
    └── secondary_image_ids: [] // List is empty
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This simplified model restricts our ability to express most real-world
nested datasets because it lacks optional fields and disallows lists. But it
helps us narrow down the sources of structural variations.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Is an optional field present or not?&lt;/li&gt;
&lt;li&gt;Is a list empty or not?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Consider a data model with these restrictions removed. It allows both
optional fields and lists - the very features that introduce structural
variations. Reconstructing any flattened nested data structure with a
well-defined schema back to its original form is indeed possible, but this
capability depends entirely on encoding these two structural properties
(optional field presence and list status) as metadata.&lt;/p&gt;
&lt;h1 id=&quot;flattening&quot; tabindex=&quot;-1&quot;&gt;Flattening &lt;a class=&quot;direct-link&quot; href=&quot;https://jacobsherin.com/posts/dremel-column-striping/#flattening&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;To flatten a nested data structure, we first enumerate its potential column
attributes. This involves traversing the schema in depth-first order. Each
column attribute corresponds to a unique path of fields from the document&#39;s
root up to a leaf node. The field definition at this leaf node determines
the optionality and data type for that column attribute.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[ ] &lt;strong&gt;TODO:&lt;/strong&gt; Diagram enumerate paths in a schema&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next, we traverse an actual data instance of the nested structure, again in
depth-first order. As we reach the leaf nodes in the data, we extract the
scalar values and append them to the lists associated with their
corresponding column attributes (as identified from the schema).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[ ] &lt;strong&gt;TODO:&lt;/strong&gt; Diagram flattening nested value to column values&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;metadata:-definition-level&quot; tabindex=&quot;-1&quot;&gt;Metadata: Definition Level &lt;a class=&quot;direct-link&quot; href=&quot;https://jacobsherin.com/posts/dremel-column-striping/#metadata:-definition-level&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;A path may terminate early before it reaches the leaf node. This happens
when an optional field is not present in the value tree. There is also a
possibility that a path defined in the schema is not present in the value
tree. Here the first field in the path is an optional field and is not
present in the value. This will go undetected without the schema.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[ ] &lt;strong&gt;TODO:&lt;/strong&gt; Diagram various legal constructions of terminating paths&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A path may also contain list fields which maybe empty in the value. So we
need to know in the case of a list field whether it is empty or contains at
least one element.&lt;/p&gt;
&lt;p&gt;We can track both cases by counting the optional fields which are present
and list fields which are not empty. If an optional field is present the
count is incremented by one. If a list field contains at least one element
the count is incremented by one. Note that the count is only incremented by
one for the list field and does not depend on the number of elements in the
list.&lt;/p&gt;
&lt;p&gt;The terminology used by Dremel for this count metadata field is &lt;strong&gt;definition
level&lt;/strong&gt;. If a path contains N optional fields and list fields, then its
definition level will be in the range (inclusive) [0, N]. The upper bound
can be derived from the schema.&lt;/p&gt;
&lt;p&gt;The definition level of a non-NULL value will always be N. For null values
the definition level tell us the exact point at which the path terminates.
This allows us to reconstruct partially terminated paths. If the definition
level is 0, we know that path is entirely missing from the value.&lt;/p&gt;
&lt;h1 id=&quot;metadata:-repetition-level&quot; tabindex=&quot;-1&quot;&gt;Metadata: Repetition Level &lt;a class=&quot;direct-link&quot; href=&quot;https://jacobsherin.com/posts/dremel-column-striping/#metadata:-repetition-level&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;A list field is variable length and maps to multiple values in a flattened
representation. Here it should be possible to determine list boundaries so
that the flattened values can be reverse mapped back to the correct list field.&lt;/p&gt;
&lt;p&gt;A schema path may define multiple list fields (nested lists). This poses
a serious challenge in also having to identify at which level of nesting a
flattened value belongs.&lt;/p&gt;
&lt;p&gt;Here we need to consider only the non-empty list fields because an empty
list field is already handled by the definition level.&lt;/p&gt;
&lt;p&gt;Dremel uses a clever trick to encode both the list boundary and nesting
level of a flattened list element into a single metadata value known as
repetition level.&lt;/p&gt;
&lt;p&gt;There are similarities to how definition level tracks the presence of
optional/list fields along a path. The maximum possible repetition level for
any value along a given schema path (let&#39;s call it R) is equal to the number
of list fields defined in that schema path. The actual repetition level (r)
assigned to a flattened value will then fall within the range (inclusive) [0,
R]. If R = 2, then a flattened value can have a repetition level of 0, 1 or 2.&lt;/p&gt;
&lt;p&gt;From interpreting the repetition level of a flattened value we can identify
the record it belongs to and the nesting level within the record if the
schema path defines nested lists.&lt;/p&gt;
&lt;p&gt;The rules for interpreting repetition levels are:
If r = 0: The value marks the beginning a new record. It is the first
occurrence of this specific field path within that new record.
If r &amp;lt; R (max repetition level for a path): This is the first element of a
new instance of a nested list. The value of &#39;r&#39; tells us which list in the
path (from root to leaf) this new instance belongs to.
If r = R: This value is a subsequent item belonging to the same instance
of most recent list that was previously started.&lt;/p&gt;
&lt;h1 id=&quot;metadata:-required-fields-only-path&quot; tabindex=&quot;-1&quot;&gt;Metadata: required fields only path &lt;a class=&quot;direct-link&quot; href=&quot;https://jacobsherin.com/posts/dremel-column-striping/#metadata:-required-fields-only-path&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Consider a schema path that contains no optional fields and no list fields.
For any value present along such a path the definition level will always be
zero as there are no optional or list fields. The repetition level will
always be zero as there are no list fields.&lt;/p&gt;
&lt;p&gt;In this specific scenario, which mirrors our simplified data model, the
schema alone is indeed sufficient to reconstruct the data, as no structural
variations due to optionality or repetition exist.&lt;/p&gt;
&lt;h1 id=&quot;putting-it-all-together&quot; tabindex=&quot;-1&quot;&gt;Putting it all together &lt;a class=&quot;direct-link&quot; href=&quot;https://jacobsherin.com/posts/dremel-column-striping/#putting-it-all-together&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Let us now see how this works in practice.&lt;/p&gt;
&lt;h2 id=&quot;schema&quot; tabindex=&quot;-1&quot;&gt;Schema &lt;a class=&quot;direct-link&quot; href=&quot;https://jacobsherin.com/posts/dremel-column-striping/#schema&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;ProductImages (doc)
|- product_id (u64)
|- images
|  |- primary_id (u64)
|  |- secondary_image_ids (list u64)
|- alt_text
   |- localizations (list)
      |- locale (string)
      |- description (optional string)
      |- keywords (list string)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This schema represents a nested data structure which contains references to
the display images belonging to a product. It also provides zero or more
localized alt text entries for internationalization (i18n). Each entry has a
locale, description (the alt text itself), and keywords (for seo).&lt;/p&gt;
&lt;p&gt;The individual attributes present in this schema are:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;No.&lt;/th&gt;
&lt;th&gt;Schema Path&lt;/th&gt;
&lt;th&gt;Data Type&lt;/th&gt;
&lt;th&gt;Optional&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;product_id&lt;/td&gt;
&lt;td&gt;u64&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;images.primary_id&lt;/td&gt;
&lt;td&gt;u64&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;images.secondary_image_ids&lt;/td&gt;
&lt;td&gt;u64&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;alt_text.localizations.locale&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;alt_text.localizations.description&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;alt_text.localizations.keywords&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Each path in our schema has a maximum possible definition level (D) and
repetition level (R). The maximum D is calculated by counting how many
fields along the path are either optional or list types. The maximum R is
the count of just the list type fields along the path. For our ProductImages
schema, these maximums are:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;No.&lt;/th&gt;
&lt;th&gt;Schema Path&lt;/th&gt;
&lt;th&gt;D&lt;/th&gt;
&lt;th&gt;R&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;product_id&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;images.primary_id&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;images.secondary_image_ids&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;alt_text.localizations.locale&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;alt_text.localizations.description&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;alt_text.localizations.keywords&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;D - Definition Level
R - Repetition Level&lt;/p&gt;
&lt;h3 id=&quot;document-1-(d1)&quot; tabindex=&quot;-1&quot;&gt;document 1 (D1) &lt;a class=&quot;direct-link&quot; href=&quot;https://jacobsherin.com/posts/dremel-column-striping/#document-1-(d1)&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Multiple holes are present in this document. the secondary images list is
empty. the single localization which is present does not have any keywords
defined yet.&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;product_id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;101&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;primary_id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2001&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;secondary_image_ids&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;alt_text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;localizations&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;locale&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;en-us&quot;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token key atrule&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;blue casual t-shirt.&quot;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token key atrule&quot;&gt;keywords&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;document-2-(d2)&quot; tabindex=&quot;-1&quot;&gt;document 2 (D2) &lt;a class=&quot;direct-link&quot; href=&quot;https://jacobsherin.com/posts/dremel-column-striping/#document-2-(d2)&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This document contains only the product id and primary image id. the
remaining properties are either missing or empty.&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;product_id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;102&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;primary_id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3010&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;secondary_image_ids&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;alt_text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;localizations&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;document-3-(d3)&quot; tabindex=&quot;-1&quot;&gt;document 3 (D3) &lt;a class=&quot;direct-link&quot; href=&quot;https://jacobsherin.com/posts/dremel-column-striping/#document-3-(d3)&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is a fairly complete document with multiple secondary image ids and
multiple localizations with varied content.&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;product_id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;103&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;primary_id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4400&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;secondary_image_ids&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4401&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4402&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4403&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;alt_text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;localizations&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;locale&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;en-us&quot;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token key atrule&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;red running shoe, side view.&quot;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token key atrule&quot;&gt;keywords&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;red shoe&quot;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;running&quot;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;sport&quot;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;locale&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;en-au&quot;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;# placeholder locale does not yet have a description&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token key atrule&quot;&gt;keywords&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;red runner&quot;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;jogging&quot;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;locale&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;en-gb&quot;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token key atrule&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;red trainer, profile.&quot;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token key atrule&quot;&gt;keywords&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;trainer&quot;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;athletics&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After flattening the documents, the values in each path are stored contiguously.&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;product_id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;102&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;103&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;images.primary_id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2001&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3010&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4400&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The paths product_id and images.primary_id contain only mandatory fields. So
the derived definition and repetition level values is going to be zero for
all values. So it is equivalent to the following storage representation.&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;product_id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;102&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;103&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;images.primary_id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2001&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3010&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4400&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;path:-images.secondary_image_ids&quot; tabindex=&quot;-1&quot;&gt;Path: images.secondary_image_ids &lt;a class=&quot;direct-link&quot; href=&quot;https://jacobsherin.com/posts/dremel-column-striping/#path:-images.secondary_image_ids&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Step 1: Flatten D1&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;images.secondary_image_ids&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token null important&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The definition level is zero because secondary_image_ids list is empty. The
repetition level is zero here for the same reason. The repetition level for
the path images.secondary_image_ids is in the range (inclusive) [0, 1]. Here
the interpretation of zero is not that this is the first element in the list,
which is not possible as the list is empty. But we have to read it together
with the NULL value and the definition level value which happens to be zero
and signals that the list is empty.&lt;/p&gt;
&lt;p&gt;Step 2: Flatten D2&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;images.secondary_image_ids&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token null important&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token null important&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The same reasoning as above applies here.&lt;/p&gt;
&lt;p&gt;Step 3: Flatten D3&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;images.secondary_image_ids&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token null important&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token null important&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4401&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4402&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4403&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As the list is not empty, the definition level for all values in this list
is 1. The repetition level for the first element 4401 is zero, and for
subsequent elements the repetition level is one. This marks 4401 as the
beginning of a new list instance in a new document.&lt;/p&gt;
&lt;h2 id=&quot;path-4:-alt_text.localizations.locale&quot; tabindex=&quot;-1&quot;&gt;Path 4: alt_text.localizations.locale &lt;a class=&quot;direct-link&quot; href=&quot;https://jacobsherin.com/posts/dremel-column-striping/#path-4:-alt_text.localizations.locale&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The struct alt_text is required/mandatory and locale is a required/mandatory
string. The localizations is a list. So this has a maximum definition level
of 1 and maximum repetition levels is also 1.&lt;/p&gt;
&lt;p&gt;The inner data type of localizations is a struct with three properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;locale: a required/mandatory string&lt;/li&gt;
&lt;li&gt;description: an optional string&lt;/li&gt;
&lt;li&gt;keywords: a list of strings&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Step 1: Flatten D1&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;alt_text.localizations.locale&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;en-us&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In D1 a single locale is defined. So the derived definition level is 1
because the localizations list is present. The repetition level is 0 which
indicates that this is the first occurrence of the locale struct property in
a new instance of the localizations list in a new document.&lt;/p&gt;
&lt;p&gt;Step 2: Flatten D2&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;alt_text.localizations.locale&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;en-us&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token null important&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In D2 the localizations list is empty. So the definition level becomes 0 and
NULL value is inserted. The repetition level is zero, but has to interpreted
together with the NULL value and definition level which shows that the
localizations list is empty in this document.&lt;/p&gt;
&lt;p&gt;Step 3: Flatten D3&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;alt_text.localizations.locale&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;en-us&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token null important&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;en-us&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;en-au&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;en-gb&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are three locale values in D3. They are added to values. The
definition level is 1 because the localizations is not empty. The
repetition level is 0 for &amp;quot;en-us&amp;quot; which signals that this is the beginning
of a new localizations list instance in a new document and this is the
first element. The subsequent elements in the list therefore have the
repetition level of 1.&lt;/p&gt;
&lt;h2 id=&quot;path-5:-alt_text.localizations.description&quot; tabindex=&quot;-1&quot;&gt;Path 5: alt_text.localizations.description &lt;a class=&quot;direct-link&quot; href=&quot;https://jacobsherin.com/posts/dremel-column-striping/#path-5:-alt_text.localizations.description&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this path localizations is a list and description is an optional string.
So the maximum definition level is 2. The maximum value for repetition level
is 1 as there is only a single list in this path.&lt;/p&gt;
&lt;p&gt;Step 1: Flatten D1&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;alt_text.localizations.description&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;blue casual t-shirt&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The optional description is present in D1. So the definition level is 2, and
the repetition level is 0. This is the first description in a new instance
of localizations, at the start of the document.&lt;/p&gt;
&lt;p&gt;Step 2: Flatten D2&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;alt_text.localizations.description&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;blue casual t-shirt&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token null important&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In D2, the localizations list is empty. A NULL value is inserted for
description. The definition level is 1 indicating that the path is defined
up to the localizations list field, but the list is empty so no actual
description value exists within a list item. The repetition level is 0, as
the entry corresponds to a new record (D2).&lt;/p&gt;
&lt;p&gt;Step 3: Flatten D3&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;alt_text.localizations.description&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;blue casual t-shirt&quot;&lt;/span&gt;         &lt;span class=&quot;token comment&quot;&gt;# D1&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token null important&quot;&gt;NULL&lt;/span&gt;                          &lt;span class=&quot;token comment&quot;&gt;# D2&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;red running shoe, side view&quot;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# D3&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token null important&quot;&gt;NULL&lt;/span&gt;                          &lt;span class=&quot;token comment&quot;&gt;# D3&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;red trainer, profile&quot;&lt;/span&gt;        &lt;span class=&quot;token comment&quot;&gt;# D3&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The second description is not present, so a NULL value is inserted in its
place and its definition level is 1. The first description and third
description are present, so they have a definition level of 2. The
repetition level of the first description is 0 to indicate that this is a
new instance of a localizations list, and this is the first description
property in the first struct element. The subsequent descriptions have a
repetition level of 1 to indicate that they are elements belonging to this same
list.&lt;/p&gt;
&lt;h2 id=&quot;path-6:-alt_text.localizations.keywords&quot; tabindex=&quot;-1&quot;&gt;Path 6: alt_text.localizations.keywords &lt;a class=&quot;direct-link&quot; href=&quot;https://jacobsherin.com/posts/dremel-column-striping/#path-6:-alt_text.localizations.keywords&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is the first time we encounter a nested list. Both localizations and
keywords are list fields. The maximum definition level is 2 and the maximum
repetition level is also 2 for this path.&lt;/p&gt;
&lt;p&gt;Step 1: Flatten D1&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;alt_text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;localizations&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;locale&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;en-us&quot;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token key atrule&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;blue casual t-shirt.&quot;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token key atrule&quot;&gt;keywords&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In D1, keywords list is present, but it is empty.&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;alt_text.localizations.keywords&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token null important&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We insert a NULL value because keywords list is empty. The definition level
is 1 as localizations list is present and not empty, but the keywords list
is empty. The repetition level is zero because this is the start of a new
record (D1).&lt;/p&gt;
&lt;p&gt;Step 2: Flatten D2&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;alt_text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;localizations&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In D2, the localizations list is empty.&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;alt_text.localizations.keywords&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token null important&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token null important&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The definition level in this case is 0 because the localizations list is
empty. The repetition level is 0 because this is the start of a new record (D2).&lt;/p&gt;
&lt;p&gt;Step 3: Flatten D3&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;alt_text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;localizations&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;locale&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;en-us&quot;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token key atrule&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;red running shoe, side view.&quot;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token key atrule&quot;&gt;keywords&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;red shoe&quot;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;running&quot;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;sport&quot;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;locale&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;en-au&quot;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;# placeholder locale does not yet have a description&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token key atrule&quot;&gt;keywords&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;red runner&quot;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;jogging&quot;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;locale&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;en-gb&quot;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token key atrule&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;red trainer, profile.&quot;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token key atrule&quot;&gt;keywords&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;trainer&quot;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;athletics&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The localizations list contains 3 items. So let us break this up by item so
we can clearly see how repetition levels varies across keywords for each item.&lt;/p&gt;
&lt;p&gt;After processing the first item in localizations:&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;alt_text.localizations.keywords&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;red shoe&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;running&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;sport&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The localizations list is present and the keywords list is present, and both
are not empty. So the definition level is 2. The first item in the list has
a repetition level of 0 because this is the beginning of a new record (D3).
The other items have a repetition level of 2 to indicate that this is a
continuation of the current keywords list.&lt;/p&gt;
&lt;p&gt;Now the second item,&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;alt_text.localizations.keywords&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;red runner&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;jogging&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The definition level is 2 as both lists in the path are present. Note that
the repetition level for &amp;quot;red runner&amp;quot; is not zero. This is significant! This
keywords field is part of the second struct item in localizations. And
localizations has a repetition level in the range (inclusive) [0, 1]. The 0
repetition level marks the beginning of a new record, but here this is the
second item in the localizations list. The computed repetition level is
therefore 1 for all remaining structs in this list. Now when we reach the
keywords list, this is a new list instance and &amp;quot;red runner&amp;quot; is the first
element in the list. So the repetition level for &amp;quot;red runner&amp;quot; is 1. The
remaining items in the list have a repetition level of 2 to indicate that it
is a continuation of the newly opened list.&lt;/p&gt;
&lt;p&gt;And the final item in localizations,&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;alt_text.localizations.keywords&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;trainer&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;athletics&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The repetition level of &amp;quot;trainer&amp;quot; is 1 because it is child property of the
third struct item in localizations list. The repetition level for the third
item can only be 1. Also, &amp;quot;trainer&amp;quot; is the first item in the new instance of
keywords list so we give it a repetition level of 1 to identify it as the
first element in a new keywords list. The remaining items in keywords get a
repetition level of 2.&lt;/p&gt;
&lt;p&gt;The final aggregation of keywords after processing D1, D2 and all three
localization items from D3:&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;alt_text.localizations.keywords&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token null important&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;                           &lt;span class=&quot;token comment&quot;&gt;# D1: keywords list is empty&lt;/span&gt;&lt;br /&gt;    NULL&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;                           &lt;span class=&quot;token comment&quot;&gt;# D2: localizations list is empty&lt;/span&gt;&lt;br /&gt;    &quot;red shoe&quot;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;running&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;sport&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# D3: 1st localization (&quot;en-us&quot;)&lt;/span&gt;&lt;br /&gt;    &quot;red runner&quot;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;jogging&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;token comment&quot;&gt;# D3: 2nd localization (&quot;en-au&quot;)&lt;/span&gt;&lt;br /&gt;    &quot;trainer&quot;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;athletics&quot;&lt;/span&gt;          &lt;span class=&quot;token comment&quot;&gt;# D3: 3rd localization (&quot;en-gb&quot;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;token comment&quot;&gt;# D1: (localizations present, keywords empty)&lt;/span&gt;&lt;br /&gt;    0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;token comment&quot;&gt;# D2: (localizations empty)&lt;/span&gt;&lt;br /&gt;    2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# D3: (both list present and non-empty)&lt;/span&gt;&lt;br /&gt;    2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;token comment&quot;&gt;# D1: new record&lt;/span&gt;&lt;br /&gt;    0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;token comment&quot;&gt;# D2: new record&lt;/span&gt;&lt;br /&gt;    0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# D3: 1st localization: r=0 for first keyword, r=2 for remaining&lt;/span&gt;&lt;br /&gt;    1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;token comment&quot;&gt;# D3: 2nd localization: r=1 for first keyword, r=2 for remaining&lt;/span&gt;&lt;br /&gt;    1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;      &lt;span class=&quot;token comment&quot;&gt;# D3: 3rd localization: r=1 for first keyword, r=2 for remaining&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;summary&quot; tabindex=&quot;-1&quot;&gt;Summary &lt;a class=&quot;direct-link&quot; href=&quot;https://jacobsherin.com/posts/dremel-column-striping/#summary&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;[ ] Condense main ideas, supporting arguments, opinions, recap&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>This is my fourth post.</title>
		<link href="https://jacobsherin.com/posts/fourthpost/"/>
		<updated>2018-09-30T00:00:00Z</updated>
		<id>https://jacobsherin.com/posts/fourthpost/</id>
		<content type="html">&lt;p&gt;Leverage agile frameworks to provide a robust synopsis for high level overviews. Iterative approaches to corporate strategy foster collaborative thinking to further the overall value proposition. Organically grow the holistic world view of disruptive innovation via workplace diversity and empowerment.&lt;/p&gt;
&lt;p&gt;Bring to the table win-win survival strategies to ensure proactive domination. At the end of the day, going forward, a new normal that has evolved from generation X is on the runway heading towards a streamlined cloud solution. User generated content in real-time will have multiple touchpoints for offshoring.&lt;/p&gt;
&lt;h2 id=&quot;section-header&quot; tabindex=&quot;-1&quot;&gt;Section Header &lt;a class=&quot;direct-link&quot; href=&quot;https://jacobsherin.com/posts/fourthpost/#section-header&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Capitalize on low hanging fruit to identify a ballpark value added activity to beta test. Override the digital divide with additional clickthroughs from DevOps. Nanotechnology immersion along the information highway will close the loop on focusing solely on the bottom line.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>This is my third post.</title>
		<link href="https://jacobsherin.com/posts/thirdpost/"/>
		<updated>2018-08-24T00:00:00Z</updated>
		<id>https://jacobsherin.com/posts/thirdpost/</id>
		<content type="html">&lt;p&gt;Leverage agile frameworks to provide a robust synopsis for high level overviews. Iterative approaches to corporate strategy foster collaborative thinking to further the overall value proposition. Organically grow the holistic world view of disruptive innovation via workplace diversity and empowerment.&lt;/p&gt;
&lt;pre class=&quot;language-diff-js&quot;&gt;&lt;code class=&quot;language-diff-js&quot;&gt;// this is a command&lt;br /&gt;function myCommand() {&lt;br /&gt;&lt;span class=&quot;token inserted-sign inserted language-js&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;	&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; counter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token deleted-sign deleted language-js&quot;&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;	counter&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;// Test with a line break above this line.&lt;br /&gt;console.log(&#39;Test&#39;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bring to the table win-win survival strategies to ensure proactive domination. At the end of the day, going forward, a new normal that has evolved from generation X is on the runway heading towards a streamlined cloud solution. User generated content in real-time will have multiple touchpoints for offshoring.&lt;/p&gt;
&lt;h2 id=&quot;section-header&quot; tabindex=&quot;-1&quot;&gt;Section Header &lt;a class=&quot;direct-link&quot; href=&quot;https://jacobsherin.com/posts/thirdpost/#section-header&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Capitalize on low hanging fruit to identify a ballpark value added activity to beta test. Override the digital divide with additional clickthroughs from DevOps. Nanotechnology immersion along the information highway will close the loop on focusing solely on the bottom line.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>This is my second post.</title>
		<link href="https://jacobsherin.com/posts/secondpost/"/>
		<updated>2018-07-04T00:00:00Z</updated>
		<id>https://jacobsherin.com/posts/secondpost/</id>
		<content type="html">&lt;p&gt;Leverage agile frameworks to provide a robust synopsis for high level overviews. Iterative approaches to corporate strategy foster collaborative thinking to further the overall value proposition. Organically grow the holistic world view of disruptive innovation via workplace diversity and empowerment.&lt;/p&gt;
&lt;h2 id=&quot;section-header&quot; tabindex=&quot;-1&quot;&gt;Section Header &lt;a class=&quot;direct-link&quot; href=&quot;https://jacobsherin.com/posts/secondpost/#section-header&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://jacobsherin.com/posts/firstpost/&quot;&gt;First post&lt;/a&gt;
&lt;a href=&quot;https://jacobsherin.com/posts/thirdpost/&quot;&gt;Third post&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Bring to the table win-win survival strategies to ensure proactive domination. At the end of the day, going forward, a new normal that has evolved from generation X is on the runway heading towards a streamlined cloud solution. User generated content in real-time will have multiple touchpoints for offshoring.&lt;/p&gt;
&lt;p&gt;Capitalize on low hanging fruit to identify a ballpark value added activity to beta test. Override the digital divide with additional clickthroughs from DevOps. Nanotechnology immersion along the information highway will close the loop on focusing solely on the bottom line.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>This is my first post.</title>
		<link href="https://jacobsherin.com/posts/firstpost/"/>
		<updated>2018-05-01T00:00:00Z</updated>
		<id>https://jacobsherin.com/posts/firstpost/</id>
		<content type="html">&lt;p&gt;Leverage agile frameworks to provide a robust synopsis for high level overviews. Iterative approaches to corporate strategy foster collaborative thinking to further the overall value proposition. Organically grow the holistic world view of disruptive innovation via workplace diversity and empowerment.&lt;/p&gt;
&lt;p&gt;Bring to the table win-win survival strategies to ensure proactive domination. At the end of the day, going forward, a new normal that has evolved from generation X is on the runway heading towards a streamlined cloud solution. User generated content in real-time will have multiple touchpoints for offshoring.&lt;/p&gt;
&lt;h2 id=&quot;section-header&quot; tabindex=&quot;-1&quot;&gt;Section Header &lt;a class=&quot;direct-link&quot; href=&quot;https://jacobsherin.com/posts/firstpost/#section-header&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Capitalize on low hanging fruit to identify a ballpark value added activity to beta test. Override the digital divide with additional clickthroughs from DevOps. Nanotechnology immersion along the information highway will close the loop on focusing solely on the bottom line.&lt;/p&gt;
&lt;pre class=&quot;language-diff-js&quot;&gt;&lt;code class=&quot;language-diff-js&quot;&gt;// this is a command&lt;br /&gt;function myCommand() {&lt;br /&gt;&lt;span class=&quot;token inserted-sign inserted language-js&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;	&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; counter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;	counter&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;}&lt;br /&gt;&lt;br /&gt;// Test with a line break above this line.&lt;br /&gt;console.log(&#39;Test&#39;);&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
</feed>
